# built application files
*.apk
*.ap_

# files for the dex VM
*.dex

# Java class files
*.class

# generated files
bin/
gen/

# Local configuration file (sdk path, etc)
local.properties

# Eclipse project files
.classpath
.project
..............................................................................
//web-client class
package com.exceptionaire.niajae.webapi;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

import android.util.Log;

public class WebClient {

    private static final int GET = 0;
    private static final int POST = 1;
	private ArrayList <NameValuePair> params;
    private ArrayList <NameValuePair> headers;

    private String url;

    private int responseCode;
    private String message;

    private String response;

    public String getResponse() {
        return response;
    }

    public String getErrorMessage() {
        return message;
    }

    public int getResponseCode() {
        return responseCode;
    }

    public WebClient(String url)
    {
        this.url = url;
        params = new ArrayList<NameValuePair>();
        headers = new ArrayList<NameValuePair>();
    }

    public void AddParam(String name, String value)
    {
        params.add(new BasicNameValuePair(name, value));
    }

    public void AddHeader(String name, String value)
    {
        headers.add(new BasicNameValuePair(name, value));
    }
    public void ClearParam()
    {
      this.params.clear();
    }
    public void Execute(int method) throws Exception
    {
        switch(method) {
            case GET:
            {
                //add parameters
                String combinedParams = "";
                if(!params.isEmpty()){
                    combinedParams += "?";
                    for(NameValuePair p : params)
                    {
                        String paramString = p.getName() + "=" + URLEncoder.encode(p.getValue(),"UTF-8");
                        if(combinedParams.length() > 1)
                        {
                            combinedParams  +=  "&" + paramString;
                        }
                        else
                        {
                            combinedParams += paramString;
                        }
                    }
                }
                Log.v("Url:", url +combinedParams );
                HttpGet request = new HttpGet(url + combinedParams);

                //add headers
                for(NameValuePair h : headers)
                {
                    request.addHeader(h.getName(), h.getValue());
                }

                executeRequest(request, url);
                break;
            }
            case POST:
            {
                HttpPost request = new HttpPost(url);

                //add headers
                for(NameValuePair h : headers)
                {
                    request.addHeader(h.getName(), h.getValue());
                }

                if(!params.isEmpty()){
                    request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                }
                Log.v("Url:", url + params );
                executeRequest(request, url);
                break;
            }
        }
    }

    private void executeRequest(HttpUriRequest request, String url)
    {
        HttpClient client = new DefaultHttpClient();

        HttpResponse httpResponse;

        try {
            httpResponse = client.execute(request);
            responseCode = httpResponse.getStatusLine().getStatusCode();
            message = httpResponse.getStatusLine().getReasonPhrase();

            HttpEntity entity = httpResponse.getEntity();

            if (entity != null) {

                InputStream instream = entity.getContent();
                response = convertStreamToString(instream);
              //  Log.v("Response:", response);
                // Closing the input stream will trigger connection release
                instream.close();
            }

        } catch (ClientProtocolException e)  {
            client.getConnectionManager().shutdown();
            e.printStackTrace();
        } catch (IOException e) {
            client.getConnectionManager().shutdown();
            e.printStackTrace();
        }
    }

    private static String convertStreamToString(InputStream is) {

        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();

        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
}
..............................................................................
//web-url class
package com.exceptionaire.niajae.webapi;

public class WebUrl {
	public static final int GO_TO_HOME = 9999;
	public static final String WebService;

	static {

		WebService = "http://exceptionaire.co/livright/webservice.php";

	}

}
..............................................................................
//web-api class
package com.exceptionaire.niajae.webapi;

import org.json.JSONObject;

import android.content.Context;

import com.exceptionaire.niajae.setting.LocalSettings;
import com.niajae.DTO.SearchVideoDetailsDTO;

public class WebApi {

	public static boolean UpdateFlag;
	public static Context _context;
	static WebClient mClient = new WebClient(WebUrl.WebService);
//	private static final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
//			+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
//	private static Pattern pattern;
//	private static Matcher matcher;
	static {
		UpdateFlag = false;
	}
	
	
	public static void getRegistersLink() {
		mClient.ClearParam();
		mClient.AddParam("task", "getregisterlinks");

		try {
			mClient.Execute(0);
			String response = mClient.getResponse();
			if (!"".equalsIgnoreCase(response) && response != null) {
				JSONObject localJSONObject = (JSONObject) new JSONObject(
						response).getJSONArray("getregisterlinks").get(0);
				if (localJSONObject.has("registerUserlink")) {
					LocalSettings.register_url_user = localJSONObject.getString("registerUserlink");
				}
				if (localJSONObject.has("registerInstructorlink")) {
					LocalSettings.register_url_instructor = localJSONObject.getString("registerInstructorlink");
				}
			}

		}

		catch (Exception e) {
			e.printStackTrace();
		}
	}

	// Login API
	public static String forgotPwd(String email_id) {
		//http://exceptionaire.co/livright/webservice.php?task=forgot_pwd&email=swapnil.t@exceptionaire.co
		//{"forgot_pwd":[{"result":1,"message":"The reset password link has been sent to your email address"}]}
		String message = "";
		mClient.ClearParam();
		mClient.AddParam("task", "forgot_pwd");
		mClient.AddParam("email",email_id );
		try {
			mClient.Execute(0);
			String response="";
			response = mClient.getResponse();
			if (!"".equalsIgnoreCase(response) && response != null) {

				System.out.println("succes_msg reponse----" + response);
				JSONObject localJSONObject = (JSONObject) new JSONObject(response).getJSONArray("forgot_pwd").get(0);
				if (localJSONObject.has("message")) {
					message = localJSONObject.getString("message");
					System.out.println("message"+message);
				}
			}

		}

		catch (Exception e) {
			e.printStackTrace();
		}
		return message;
	}

	public static SearchVideoDetailsDTO fetchVideoDetails(String video_detailFetchID) {
		
		SearchVideoDetailsDTO videoDetailsDTO = new SearchVideoDetailsDTO();
		mClient.ClearParam();
		mClient.AddParam("task", "videodetails");
		mClient.AddParam("videoid",video_detailFetchID );
		try {
			mClient.Execute(0);
			String response="";
			response = mClient.getResponse();
			if (!"".equalsIgnoreCase(response) && response != null) {

				System.out.println("succes_msg reponse----" + response);
				JSONObject localJSONObject = (JSONObject) new JSONObject(response).getJSONArray("videodetails").get(0);
				if (localJSONObject.has("video_name")) {
					videoDetailsDTO.video_name = localJSONObject.getString("video_name");
				}
				if (localJSONObject.has("video_duration")) {
					videoDetailsDTO.video_duration = localJSONObject.getString("video_duration");
				}
				if (localJSONObject.has("video_desc")) {
					videoDetailsDTO.video_desc = localJSONObject.getString("video_desc");
				}
			}

		}

		catch (Exception e) {
			e.printStackTrace();
		}
		return videoDetailsDTO;
	}
	
	

}
..............................................................................
//for validation filters

InputFilter assigntxt_Filter = new InputFilter() {
		boolean canEnterSpace = false;

		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {

			if (Fname_editTxt.getText().toString().equals("")) {
				canEnterSpace = false;
			}

			StringBuilder builder = new StringBuilder();

			for (int i = start; i < end; i++) {
				char currentChar = source.charAt(i);

				if (Character.isLetter(currentChar) || currentChar == '_') {
					builder.append(currentChar);
					canEnterSpace = true;
				}

				if (Character.isWhitespace(currentChar) && canEnterSpace) {
					builder.append(currentChar);
				}

			}
			return builder.toString();
		}

	};
	InputFilter lnametxt_Filter = new InputFilter() {
		boolean canEnterSpace = false;

		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {

			if (Lname_editTxt.getText().toString().equals("")) {
				canEnterSpace = false;
			}

			StringBuilder builder = new StringBuilder();

			for (int i = start; i < end; i++) {
				char currentChar = source.charAt(i);

				if (Character.isLetter(currentChar) || currentChar == '_') {
					builder.append(currentChar);
					canEnterSpace = true;
				}

				if (Character.isWhitespace(currentChar) && canEnterSpace) {
					builder.append(currentChar);
				}

			}
			return builder.toString();
		}

	};

	InputFilter emailIDtxt_Filter = new InputFilter() {
		boolean canEnterSpace = false;

		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {

			canEnterSpace = false;

			StringBuilder builder = new StringBuilder();

			for (int i = start; i < end; i++) {
				char currentChar = source.charAt(i);

				if (Character.isLetterOrDigit(currentChar)
						|| currentChar == '_'
						|| specialChars.contains(source.subSequence(i, 1))) {
					builder.append(currentChar);
					canEnterSpace = true;
				}

				if (Character.isWhitespace(currentChar) && canEnterSpace) {
					builder.append(currentChar);
				}

			}
			return builder.toString();
		}

	};
	InputFilter cmpnytxt_Filter = new InputFilter() {
		boolean canEnterSpace = false;

		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {

			if (cmpynm_editTxt.getText().toString().equals("")) {
				canEnterSpace = false;
			}

			StringBuilder builder = new StringBuilder();

			for (int i = start; i < end; i++) {
				char currentChar = source.charAt(i);
				if (Character.isLetterOrDigit(currentChar)
						|| currentChar == '_'
						|| specialChars.contains(source.subSequence(i, 1))) {
					builder.append(currentChar);
					canEnterSpace = true;
				}

				if (Character.isWhitespace(currentChar) && canEnterSpace) {
					builder.append(currentChar);
				}

			}
			return builder.toString();
		}

	};
..................................................................................
package com.exceptionaire.baycitiesitaliandeli;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.R.integer;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.text.Editable;
import android.text.Html;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.exceptionaire.baycitiesitaliandeli.Adapter.Product_list_Adapter;
import com.exceptionaire.baycitiesitaliandeli.Adapter.Spinner_Adapter;
import com.exceptionaire.baycitiesitaliandeli.ImageLoader.ImageLoader;
import com.exceptionaire.baycitiesitaliandeli.LoginTabActivity.UpdateProfile;
import com.exceptionaire.baycitiesitaliandeli.WebApi.WebClient;
import com.exceptionaire.baycitiesitaliandeli.database.AddToCart;
import com.exceptionaire.baycitiesitaliandeli.database.AddToCartDatabase;
import com.exceptionaire.baycitiesitaliandeli.database.DatabaseHelper;
import com.exceptionaire.baycitiesitaliandeli.database.ProductDatabase;
import com.exceptionaire.baycitiesitaliandeli.database.Products;

//fragment
public class AddToCartActivity extends FragmentActivity {

	/**
	 * The {@link android.support.v4.view.PagerAdapter} that will provide
	 * fragments for each of the sections. We use a
	 * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which
	 * will keep every loaded fragment in memory. If this becomes too memory
	 * intensive, it may be best to switch to a
	 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
	 */
	DatabaseHelper dbHelper;
	// SectionsPagerAdapter mSectionsPagerAdapter;
	static Product_list_Adapter mProduct_list_Adapter;
	static Spinner_Adapter mSpinner_Bread_Adapter, mSpinner_Cheese_Adapter;
	private static Pattern pattern;
	private static final String PHONE_NUMBER = "^\\(?\\d{3}\\d{3}\\d{4}((\\s=?)(ext\\.|x)\\d{1,4})?$";
	private static Matcher matcher;
	public static ArrayList<HashMap<String, String>> nameOfProduct = new ArrayList<HashMap<String, String>>();
	// public ArrayList<String> nameOfEvent_new = new ArrayList<String>();
	ListView listviewCart;
	RadioButton[] rb = null, rb1 = null, rb1s = null;

	RelativeLayout rLayoutSize = null, rLayoutBread = null,
			rLayoutSize_slice = null, rlayoutforeditsizeslice = null,
			rLayoutCondiments = null, rLayoutSpecialRequests = null,
			rLayoutReviewItem = null, rlayoutforeditassignname = null,
			rlayoutforeditspecialrequestnew = null, rLayoutOrderInfo = null,
			rLayoutThankYou = null, top_bar = null, list_rlyout = null,
			rlayoutforeditbreadcheese = null, rlayoutforeditcondiments = null,
			empty_list = null;
	// rLayoutShoppingCart = null,
	LinearLayout lLayoutTitle = null, lLayout2_Size = null,
			lLayout2_Size_slice = null, lLayout2_Condiments = null;
	ImageView ivProductImage = null;
	TextView name_TXT_Size = null, name_TXT1_Size = null, tvSize_Size = null,
			product_price_TXT1_Size = null, tvOrderTotal_OrderInfo = null,
			tvDescription_Size = null, tvSize_Bread = null,
			empty_listview_txt = null, tvBreadType_Bread = null,
			tvCheeseType_Bread = null, postorder_msg = null,
			tvDescription_Bread = null, tvSize_ReviewItem = null,
			tvSize_ReviewItemslice = null, tvBread_ReviewItem = null,
			tvCondimentsTotal_ReviewItem = null,
			tvAssignName_ReviewItem = null, tvSpecialRequest_ReviewItem = null,
			tvOrderTotal_ShoppingCartQnty = null,
			tvOrderTotal_ShoppingCart = null;

	Spinner spinnerCheese_Bread = null, spinnerBread_Bread = null;
	RadioGroup radioGroup = null, radioGroup1 = null, radioGroup1s = null;

	String newCondimentsString = "0";
	// RadioButton radioButton1 = null, radioButton2 = null, radioButton3 =
	// null,
	// radioButton4 = null;
	Button btnSelectBread_Size = null, btnBack_Size = null,
			btnEditslice_ReviewItem = null, btnCancel_Size = null,
			btnSelectCondiments_Bread = null, btnBack_Bread = null,
			btnCancel_Bread = null, btnAssignName_Condiments = null,
			btnBack_Condiments = null, btnCancel_Condiments = null,
			btnReview_SpecialRequests = null, btnBack_SpecialRequests = null,
			btnCancel_SpecialRequests = null, btnAddToCart_ReviewItem = null,
			btnCancel_ReviewItem = null, btnCheckout_ShoppingCart = null,
			btnPlaceOrder_OrderInfo = null, btnOkThankYou = null,
			btnPlaceOrder_backbtn = null;

	Button btnEdit1_ReviewItem = null, btnEdit2_ReviewItem = null,
			btnEdit3_ReviewItem = null, btnEdit4_ReviewItem = null,
			btnEdit5_ReviewItem = null, btnBack_Size_slice = null,
			btnSelectBread_Size_slice = null;

	EditText etRequest_Special = null, etSandwich_Special = null,
			etFirstName_OrderInfo = null, etLastName_OrderInfo = null,
			etEmailId_OrderInfo = null, etPhone_OrderInfo = null,
			etCompany_OrderInfo = null, etPickUp_OrderInfo = null,
			etQuantity = null;
	// ListView lvShoppingCart = null;
	CheckBox checkBox_Condiments = null;

	StringBuilder condimentsBuilder, condimentsArrayBuilder, cheeseBuilder,
			breadBuilder;
	String fName = "", lName = "", email = "", phone = "", company = "",
			pickUpTime = "", quantity = "", rstatus_server = "0";

	Products objProducts;
	AddToCart addToCart;

	String result = "";
	String catName = "", catId = "";
	WebClient mClient;
	ArrayList<String> categoryName = new ArrayList<String>();
	ArrayList<String> radioGroupArray = new ArrayList<String>();
	ProductDatabase pDatabase;
	AddToCartDatabase addToCartDatabase;
	ArrayList<IDDTO> slices_fieldoptionidArray = new ArrayList<IDDTO>();
	String condiments_msg1 = "", condiments_msg2 = "";

	public String customprice = "", customprice_temp_new = "", short_name = "",
			fieldId = "", fieldOptionId = "", product_id = "", pSize = "",
			product_name, pSize_radio = "", breadType = "", cheeseType = "",
			condimentTotal = "", sandwichSpecial = "", requestSpecial = "",
			type_fieldoptionid = "", productImage = "", selectedBread = "",
			selectedCheese = "", assign_name = "", special_Request = "",
			productDescription = "";

	Double productPrice = 0.0, condimentsTotalPrice = 0.0,
			productPrice_change = 0.00, condimentsTotalPrice_change = 0.00;
	Double tempPrice = 0.0;

	ProgressDialog pd, mProgressDialogImg;
	public static int count;
	int j = 0;

	ArrayList<String> condimentsArray = new ArrayList<String>();
	ArrayList<String> condimentsPriceArray = new ArrayList<String>();
	ArrayList<String> cheeseTypeArray = new ArrayList<String>();
	ArrayList<String> cheeseTypePriceArray = new ArrayList<String>();
	ArrayList<String> breadTypeArray = new ArrayList<String>();

	String condiments_result = "", cheesetype_result = "",
			breadtype_result = "", slices_result = "",
			newCondimentsString_slice = "0";

	AddToCartAdapter addToCartAdapter;
	public ArrayList<HashMap<String, String>> nameOfProducts1 = new ArrayList<HashMap<String, String>>();

	public ArrayList<HashMap<String, String>> nameOfProducts_forTempValues = new ArrayList<HashMap<String, String>>();
	public static boolean boolAddToCart = false;

	int globleIndex = 0;
	/**
	 * The {@link ViewPager} that will host the section contents.
	 */

	// for updating cart products
	String assign_name_update = "", special_request_update = "",
			psize_update = "", quantity_update = "", customprice_update = "",
			condimentstotal_update = "0.0", productpriceTotal = "",
			shortname_update = "", fieldid_update = "",
			fieldoptionid_update = "", pickuptime_update = "",
			condimenets_update = "", selectedBread_update = "",
			selectedCheese_update;

	public boolean check_onResumeCalled = false;
	ViewPager mViewPager;
	ImageView welcomeImageView;

	ProgressDialog mProgressDialog = null, mProgressDialog_tempplace = null;
	public ImageLoader imageLoader_main;
	int selectedItemIndex = 0;
	String serverResponse = "";
	WebClient web;

	public static boolean isRefreshAdapter = false, ispriceadded = false;
	WebClient_temp webClient_temp = null;

	public Typeface customFont, customFontBold;
	public boolean isSelect = false, isSelectCondiments = false,
			isSelectBreadCheese = false, isPsizeFlag = false;
	ArrayList<String> selectedCondimentsArray = new ArrayList<String>();

	String isSpecialTypeShoworNot = "0";

	double changecheeseprice = 0.0;
	int productQTY = 1;

	ArrayList<String> selectedCondimentsIDArray = new ArrayList<String>();
	ArrayList<IDDTO> condiments_fieldoptionidArray = new ArrayList<IDDTO>();
	ArrayList<IDDTO> cheeseType_fieldoptionidArray = new ArrayList<IDDTO>();
	ArrayList<String> breadTypeArrayID = new ArrayList<String>();
	String cheese_typeID = "1", bread_typeID = "1";
	String str_id = "";
	ArrayList<String> condiments_types = new ArrayList<String>();

	String cheese_price_fname = "0.0", update_check_new = "";

	ConnectionDetector cd;
	String Fname_editTxt_str = "", Lname_editTxt_str = "",
			emailid_editTxt_str = "", phoneNumber_editTxt_str = "",
			cmpynm_editTxt_str = "", optional_time = "";
	private static final String EMAIL_VALID_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
			+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	public static TimePicker timepicker;
	int hour ,minute;
	Dialog dialog=null;
	String selectedSlice="";
	Button ok_btnshowdialog;
	List<Integer> notAvailableProductlist = new ArrayList<Integer>();
	
	public static boolean iscartRefresh=false;
	public int isrefreshCount=0;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.cart_page_tab);
		getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
		customFont = Typeface.createFromAsset(getAssets(),
				"OpenSans-Regular.ttf");
		customFontBold = Typeface.createFromAsset(getAssets(),
				"OpenSans-Bold.ttf");
		cd = new ConnectionDetector(getApplicationContext());
		pDatabase = new ProductDatabase(AddToCartActivity.this);
		HomepageTabActvity.postionOfActivity = 2;
		// new FetchItemList().execute();
		imageLoader_main = new ImageLoader(AddToCartActivity.this);
		initialisation();

		Calendar mcurrentTime = Calendar.getInstance();
		 hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
		minute = mcurrentTime.get(Calendar.MINUTE);Dialog dialog = null;
	
		
		welcomeImageView = (ImageView) findViewById(R.id.welcome_msg);
		top_bar.setVisibility(View.VISIBLE);
		welcomeImageView.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showShareDialog();
			}
		});
		addToCartDatabase = new AddToCartDatabase(AddToCartActivity.this);

		listviewCart = (ListView) findViewById(R.id.listviewCart);
		isRefreshAdapter = false;
//		new FetchItemList().execute();

		listviewCart.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub

				// working code

				// selectedItemIndex=position;
				// globleIndex=position;
				// setImgeBitmapImageView();
				// top_bar.setVisibility(View.GONE);
				// list_rlyout.setVisibility(View.GONE);
				// rLayoutReviewItem.setVisibility(View.VISIBLE);
				// lLayoutTitle.setVisibility(View.VISIBLE);
				// System.out.println("checked...");
				// if(nameOfProducts_forTempValues.size()!=0)
				// nameOfProducts_forTempValues.clear();
				// nameOfProducts_forTempValues=addToCartDatabase.getSelectedProductListFromCart(nameOfProducts1.get(position).get("Product_Id").toString());
				// setAddtoCartEditValues();

				// for editing order

				// boolAddToCart = true;
				// HomePageActivity.tabHost.setCurrentTab(1);
				// TextView title = (TextView)
				// HomePageActivity.tabHost.getTabWidget().getChildTabViewAt(1).findViewById(android.R.id.title)
				// title.setText("xyz");

			}

		});

		etPickUp_OrderInfo.setKeyListener(null);
		etPickUp_OrderInfo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showPopUp();
//				Calendar mcurrentTime = Calendar.getInstance();
//				int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
//				int minute = mcurrentTime.get(Calendar.MINUTE);
//				TimePickerDialog mTimePicker;
//				mTimePicker = new TimePickerDialog(AddToCartActivity.this,
//						new TimePickerDialog.OnTimeSetListener() {
//							@Override
//							public void onTimeSet(TimePicker timePicker,
//									int selectedHour, int selectedMinute) {
//								etPickUp_OrderInfo.setText(selectedHour + ":"
//										+ selectedMinute);
//							}
//						}, hour, minute, false);// Yes 24 hour time
//				mTimePicker.setTitle("Select Time");
//				mTimePicker.show();
			}
		});
		btnPlaceOrder_backbtn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				iscartRefresh=true;
				rLayoutOrderInfo.setVisibility(View.GONE);
				top_bar.setVisibility(View.VISIBLE);
				list_rlyout.setVisibility(View.VISIBLE);
			}
		});
		// rLayoutSize...To be visible after listitem is clicked
		btnSelectBread_Size.setOnClickListener(new OnClickListener() {

			@SuppressLint("NewApi")
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// if (pSize.isEmpty() || pSize.equalsIgnoreCase("")) {
				// Toast.makeText(AddToCartActivity.this,
				// "Please select atleast one option",
				// Toast.LENGTH_SHORT).show();
				// } else {rLayoutSize.setVisibility(View.GONE);
				if (cd.isConnectingToInternet()) {
					if (slices_fieldoptionidArray != null
							&& slices_fieldoptionidArray.size() > 1) {
						
						ArrayList<HashMap<String, String>> arr1 = pDatabase
								.getFieldOptionId(product_id, pSize);

						fieldOptionId = arr1.get(0).get("fieldOptionId")
								.toString();
						customprice = arr1.get(0).get("customprice").toString();

						productPrice = Double.parseDouble(arr1.get(0).get(
								"customprice"));
						update_check_new = pSize_radio;
						lLayout2_Size_slice.removeAllViews();
						rLayoutSize_slice.setVisibility(View.VISIBLE);
						rLayoutSize.setVisibility(View.GONE);
						lLayout2_Size_slice
								.setOrientation(LinearLayout.VERTICAL);
						radioGroup1s = new RadioGroup(AddToCartActivity.this);
						radioGroup1s.setOrientation(RadioGroup.VERTICAL);
						// radioGroup1.setGravity(Gravity.CENTER_HORIZONTAL);
						// radioGroup1.setWeightSum(1);
						rb1s = new RadioButton[slices_fieldoptionidArray.size()];
						for (int i = 0; i < slices_fieldoptionidArray.size(); i++) {

							rb1s[i] = new RadioButton(AddToCartActivity.this);
							radioGroup1s.addView(rb1s[i]);

							rb1s[i].setText(slices_fieldoptionidArray.get(i).cnmdname);
							rb1s[i].setTextColor(Color.BLACK);
							rb1s[i].setTypeface(customFont);
						}
//						rb1s[0].setChecked(true);
//						newCondimentsString_slice = slices_fieldoptionidArray
//								.get(0).cnmdname
//								+ "@"
//								+ slices_fieldoptionidArray.get(0).cnmdid;
						
						if(selectedSlice.equalsIgnoreCase("Thin")){
							rb1s[0].setChecked(true);
							newCondimentsString_slice = slices_fieldoptionidArray.get(0).cnmdname
									+ "@" + slices_fieldoptionidArray.get(0).cnmdid;
							}
							else{
								rb1s[1].setChecked(true);
								newCondimentsString_slice = slices_fieldoptionidArray.get(1).cnmdname
										+ "@" + slices_fieldoptionidArray.get(1).cnmdid;
							}
						
						radioGroup1s
								.setOnCheckedChangeListener(new OnCheckedChangeListener() {

									@Override
									public void onCheckedChanged(
											RadioGroup group, int checkedId) {
										// TODO Auto-generated method stub

										int selected = group
												.getCheckedRadioButtonId();
										System.out
												.println("The value of checked button============"
														+ selected);
										// pSize = rb[0].getText().toString();
										newCondimentsString_slice = ((RadioButton) AddToCartActivity.this.findViewById(group
												.getCheckedRadioButtonId()))
												.getText().toString();
										for (int i = 0; i < slices_fieldoptionidArray
												.size(); i++) {
											if (newCondimentsString_slice
													.trim()
													.equalsIgnoreCase(
															slices_fieldoptionidArray
																	.get(i).cnmdname
																	.trim())) {
												newCondimentsString_slice = newCondimentsString_slice
														+ "@"
														+ slices_fieldoptionidArray
																.get(i).cnmdid;
												break;
											}
										}
										System.out.println("kkkkk"
												+ newCondimentsString);
									}

								});
						lLayout2_Size_slice.addView(radioGroup1s);

					} else if (isSelectCondiments) {
						// rLayoutSize.setVisibility(View.GONE);
						// rlayoutforeditbreadcheese.setVisibility(View.GONE);
						// rlayoutforeditcondiments.setVisibility(View.GONE);
						// rLayoutSpecialRequests.setVisibility(View.VISIBLE);
						
						if (isSpecialTypeShoworNot.equalsIgnoreCase("1")){
							rLayoutSize.setVisibility(View.GONE);
							rlayoutforeditbreadcheese.setVisibility(View.GONE);
							rlayoutforeditcondiments.setVisibility(View.GONE);
							rLayoutSpecialRequests.setVisibility(View.VISIBLE);
							rlayoutforeditassignname.setVisibility(View.VISIBLE);
							rlayoutforeditspecialrequestnew.setVisibility(View.VISIBLE);
						}
						else{
						ArrayList<HashMap<String, String>> arr1 = pDatabase
								.getFieldOptionId(product_id, pSize);

						fieldOptionId = arr1.get(0).get("fieldOptionId")
								.toString();
						customprice = arr1.get(0).get("customprice").toString();

						productPrice = Double.parseDouble(arr1.get(0).get(
								"customprice"));
						String str_s = pSize_radio;
						if (str_s.equalsIgnoreCase("S"))
							str_s = "Small (Plain)";
						if (str_s.equalsIgnoreCase("L"))
							str_s = "Large (Plain)";
						if (str_s.equalsIgnoreCase("SW"))
							str_s = "Small With Works";
						if (str_s.equalsIgnoreCase("LW"))
							str_s = "Large With Works";

						rLayoutSize.setVisibility(View.GONE);
						rlayoutforeditbreadcheese.setVisibility(View.GONE);
						rlayoutforeditcondiments.setVisibility(View.GONE);

						rLayoutReviewItem.setVisibility(View.VISIBLE);

						rlayoutforeditassignname.setVisibility(View.GONE);
						rlayoutforeditspecialrequestnew
								.setVisibility(View.GONE);
//						if (newCondimentsString.length() < 2)
//							tvSize_ReviewItem.setText(str_s);
						if(newCondimentsString.length()<2){
							if(str_s.equalsIgnoreCase("D"))
								tvSize_ReviewItem.setText("Dinner");
							else
							 tvSize_ReviewItem.setText(str_s);
							
						}
						else
							tvSize_ReviewItem.setText(str_s + " ("
									+ newCondimentsString + ")");
						update_check_new = pSize_radio;
						tvSize_ReviewItem.setTextColor(Color.BLACK);
						tvSize_ReviewItem.setTypeface(customFont);

						tvBread_ReviewItem.setText(selectedBread + ", "
								+ selectedCheese);
						tvBread_ReviewItem.setTextColor(Color.BLACK);
						tvBread_ReviewItem.setTypeface(customFont);

						// tvCondimentsTotal_ReviewItem.setText(""+new
						// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
						// .toString())));
						tvCondimentsTotal_ReviewItem.setText(""
								+ new DecimalFormat("0.00").format((Double
										.valueOf(condimentsTotalPrice) * Double
										.parseDouble(quantity))));
						tvCondimentsTotal_ReviewItem.setTextColor(Color.BLACK);
						tvCondimentsTotal_ReviewItem.setTypeface(customFont);
					}

					} else {
						rLayoutSize.setVisibility(View.GONE);
						rLayoutBread.setVisibility(View.VISIBLE);
						condiments_msg1 = new String();
						condiments_msg2 = new String();
						condimentsTotalPrice = 0.0;
						cheese_price_fname = "0.0";
						ArrayList<HashMap<String, String>> arr1 = pDatabase
								.getFieldOptionId(product_id, pSize);

						fieldOptionId = arr1.get(0).get("fieldOptionId")
								.toString();
						customprice = arr1.get(0).get("customprice").toString();

						productPrice = Double.parseDouble(arr1.get(0).get(
								"customprice"));
						changecheeseprice = 0.0;
						new GetCondimentsAsync().execute();
					}
				} else {
					showAlertDialog_finish(AddToCartActivity.this,
							"No Internet Connection",
							"Please check your internet connection", false);
				}
			}

			// }
		});
		btnBack_Size.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSize.setVisibility(View.GONE);
				// lLayout2_Size.removeAllViews();
				product_price_TXT1_Size.setText("PRICE: $"
						+ new DecimalFormat("0.00").format(Double
								.valueOf(productPrice)
								* Double.parseDouble(quantity)));
				rLayoutReviewItem.setVisibility(View.VISIBLE);
				System.out
						.println("Button Back called===============btnBack_Size");

			}
		});
		btnCancel_Size.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSize.setVisibility(View.GONE);
				lLayout2_Size.removeView(radioGroup);
			}
		});
		// rLayoutBread...To be visible after select condiments is clicked
		btnSelectCondiments_Bread.setOnClickListener(new OnClickListener() {

			@SuppressLint("NewApi")
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// newCondimentsString="0";
				if (selectedCheese.isEmpty()
						|| selectedCheese.equalsIgnoreCase("Select Cheese")) {
					Toast.makeText(AddToCartActivity.this,
							"Please select cheese type", Toast.LENGTH_SHORT)
							.show();
				} else {
					rLayoutBread.setVisibility(View.GONE);
					rLayoutCondiments.setVisibility(View.VISIBLE);

					// lLayout2_Condiments.removeAllViews();

					// condimentsArray.clear();
					// newly commited
					// settingCondinments();
				}
			}

			//
			// @SuppressLint("NewApi")
			// @Override
			// public void onClick(View v) {
			// // TODO Auto-generated method stub
			// rLayoutBread.setVisibility(View.GONE);
			// rLayoutCondiments.setVisibility(View.VISIBLE);
			//
			// condimentsArrayBuilder = new StringBuilder();
			// condimentsBuilder = new StringBuilder();
			//
			// // new GetCondimentsAsync().execute();
			// if (condiments_msg1.isEmpty()
			// || condiments_msg1.equalsIgnoreCase("")) {
			//
			// for (int i = 0; i < condimentsArray.size(); i++) {
			// // System.out.println("Value of the Size========"
			// // + arr.get(i).get(productName).toString());
			// j = i;
			// checkBox_Condiments = new CheckBox(
			// AddToCartActivity.this);
			// // checkBox_Condiments.setText(condiments[i]);
			// checkBox_Condiments.setText(condimentsArray.get(i));
			// condimentsArrayBuilder.append(condimentsArray.get(i)
			// .toString() + ",");
			// // + " +$" + condimentsPriceArray.get(i));
			// checkBox_Condiments.setTextColor(Color.BLACK);
			// checkBox_Condiments.setTypeface(customFont);
			//
			// checkBox_Condiments
			// .setOnClickListener(getOnClickDoSomething(checkBox_Condiments));
			// lLayout2_Condiments.addView(checkBox_Condiments);
			// }
			// } else {
			// TextView tv = new TextView(AddToCartActivity.this);
			//
			// tv.setText(Html.fromHtml(condiments_msg1 + ":<BR></BR>"));
			// tv.append(condiments_msg2);
			// tv.setTextColor(Color.BLACK);
			// tv.setTextSize(18);
			// tv.setTypeface(customFont);
			// lLayout2_Condiments.addView(tv);
			// }
			// }
			//
			// View.OnClickListener getOnClickDoSomething(final Button button) {
			// return new View.OnClickListener() {
			// public void onClick(View v) {
			//
			// condimentsBuilder.append(button.getText().toString()
			// + ",");
			// }
			// };
			// }
		});
		btnBack_Bread.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSize.setVisibility(View.VISIBLE);
				rLayoutBread.setVisibility(View.GONE);
				System.out
						.println("Button Back called===============btnBack_Bread");
				// lLayout2_Condiments.removeAllViews();
			}
		});
		btnCancel_Bread.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutBread.setVisibility(View.GONE);
				// lLayout2_Size.removeView(radioGroup);
			}
		});
		// rLayoutCondiments...To be visible after Assign Name is clicked
		btnAssignName_Condiments.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// if special request show
				if (isSpecialTypeShoworNot.equalsIgnoreCase("1")) {
					rLayoutCondiments.setVisibility(View.GONE);
					rLayoutSpecialRequests.setVisibility(View.VISIBLE);
					rlayoutforeditassignname.setVisibility(View.VISIBLE);
					rlayoutforeditspecialrequestnew.setVisibility(View.VISIBLE);
				} else {

					rLayoutCondiments.setVisibility(View.GONE);
					rLayoutReviewItem.setVisibility(View.VISIBLE);
					isSelectCondiments = Boolean
							.parseBoolean(nameOfProducts_forTempValues.get(0)
									.get("isBreadCheeseOrNoy").toString());
					System.out.println("showing types or not "
							+ isSelectCondiments);

					// updated changes
					// String
					// str=nameOfProducts_forTempValues.get(0).get("Product_selected_size").toString();,
					String str = pSize_radio;
					if (str.equalsIgnoreCase("S"))
						str = "Small (Plain)";
					if (str.equalsIgnoreCase("L"))
						str = "Large (Plain)";
					if (str.equalsIgnoreCase("SW"))
						str = "Small With Works";
					if (str.equalsIgnoreCase("LW"))
						str = "Large With Works";

					rlayoutforeditassignname.setVisibility(View.VISIBLE);
					rlayoutforeditspecialrequestnew.setVisibility(View.VISIBLE);
					if (isSelectCondiments) {
						rlayoutforeditbreadcheese.setVisibility(View.GONE);
						rlayoutforeditcondiments.setVisibility(View.GONE);
						if (isSpecialTypeShoworNot.equalsIgnoreCase("0")) {
							rLayoutSpecialRequests.setVisibility(View.GONE);
							rlayoutforeditassignname.setVisibility(View.GONE);
							rlayoutforeditspecialrequestnew
									.setVisibility(View.GONE);
						}
						// tvSize_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_selected_size").toString());
//						if (newCondimentsString.length() < 2)
//							tvSize_ReviewItem.setText(str);
						if(newCondimentsString.length()<2){
							if(str.equalsIgnoreCase("D"))
								tvSize_ReviewItem.setText("Dinner");
							else
							 tvSize_ReviewItem.setText(str);
							
						}
						else
							tvSize_ReviewItem.setText(str + " ("
									+ newCondimentsString + ")");
						update_check_new = str;
						// tvSize_ReviewItem.setText(str);
						tvSize_ReviewItem.setTextColor(Color.BLACK);

						tvBread_ReviewItem.setText(nameOfProducts_forTempValues
								.get(0).get("Product_selected_bread")
								.toString()
								+ ", "
								+ nameOfProducts_forTempValues.get(0)
										.get("Product_selected_cheese")
										.toString());
						tvBread_ReviewItem.setTextColor(Color.BLACK);

						// tvCondimentsTotal_ReviewItem.setText(""+new
						// DecimalFormat("0.00").format(Double.valueOf(nameOfProducts_forTempValues.get(0).get("Product_condimentsTotalPrice").toString())));

						// tvCondimentsTotal_ReviewItem.setText(new
						// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
						// .toString())));
						tvCondimentsTotal_ReviewItem.setText(""
								+ new DecimalFormat("0.00").format((Double
										.valueOf(condimentsTotalPrice) * Double
										.parseDouble(quantity))));
						tvBread_ReviewItem.setTextColor(Color.BLACK);

						tvAssignName_ReviewItem
								.setText(nameOfProducts_forTempValues.get(0)
										.get("Product_assign_name").toString());
						tvAssignName_ReviewItem.setTextColor(Color.BLACK);

						tvSpecialRequest_ReviewItem
								.setText(nameOfProducts_forTempValues.get(0)
										.get("Product_special_request")
										.toString());
						tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);

						// etQuantity.setText(nameOfProducts_forTempValues.get(0).get("Product_Qnty").toString());
						etSandwich_Special.setText(nameOfProducts_forTempValues
								.get(0).get("Product_assign_name").toString());
						etRequest_Special.setText(nameOfProducts_forTempValues
								.get(0).get("Product_special_request")
								.toString());
						product_price_TXT1_Size.setText("PRICE: $"
								+ new DecimalFormat("0.00").format(productPrice
										* Double.parseDouble(quantity)));
					} else {

						rlayoutforeditbreadcheese.setVisibility(View.VISIBLE);
						rlayoutforeditcondiments.setVisibility(View.VISIBLE);

						// hiding special request
						if (isSpecialTypeShoworNot.equalsIgnoreCase("0")) {
							rLayoutSpecialRequests.setVisibility(View.GONE);
							rlayoutforeditassignname.setVisibility(View.GONE);
							rlayoutforeditspecialrequestnew
									.setVisibility(View.GONE);
						}
//						if (newCondimentsString.length() < 2)
//							tvSize_ReviewItem.setText(str);
						if(newCondimentsString.length()<2){
							if(str.equalsIgnoreCase("D"))
								tvSize_ReviewItem.setText("Dinner");
							else
							 tvSize_ReviewItem.setText(str);
							
						}
						else
							tvSize_ReviewItem.setText(str + " ("
									+ newCondimentsString + ")");
						update_check_new = str;
						// tvSize_ReviewItem.setText(str);
						tvSize_ReviewItem.setTextColor(Color.BLACK);

						tvBread_ReviewItem.setText(nameOfProducts_forTempValues
								.get(0).get("Product_selected_bread")
								.toString()
								+ ", "
								+ nameOfProducts_forTempValues.get(0)
										.get("Product_selected_cheese")
										.toString());
						tvBread_ReviewItem.setTextColor(Color.BLACK);

						// tvCondimentsTotal_ReviewItem.setText(new
						// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
						// .toString())));
						tvCondimentsTotal_ReviewItem.setText(""
								+ new DecimalFormat("0.00").format((Double
										.valueOf(condimentsTotalPrice) * Double
										.parseDouble(quantity))));
						// tvCondimentsTotal_ReviewItem.setText(new
						// DecimalFormat("0.00").format(Double.valueOf(nameOfProducts_forTempValues.get(0).get("Product_condimentsTotalPrice").toString())));
						tvBread_ReviewItem.setTextColor(Color.BLACK);

						tvAssignName_ReviewItem
								.setText(nameOfProducts_forTempValues.get(0)
										.get("Product_assign_name").toString());
						tvAssignName_ReviewItem.setTextColor(Color.BLACK);

						tvSpecialRequest_ReviewItem
								.setText(nameOfProducts_forTempValues.get(0)
										.get("Product_special_request")
										.toString());
						tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);

						// etQuantity.setText(nameOfProducts_forTempValues.get(0).get("Product_Qnty").toString());
						etSandwich_Special.setText(nameOfProducts_forTempValues
								.get(0).get("Product_assign_name").toString());
						etRequest_Special.setText(nameOfProducts_forTempValues
								.get(0).get("Product_special_request")
								.toString());
						product_price_TXT1_Size.setText("PRICE: $"
								+ new DecimalFormat("0.00").format(productPrice
										* Double.parseDouble(quantity)));
					}
				}
			}
		});
		btnBack_Condiments.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				System.out
						.println("Button Back called===============btnBack_Condiments");
				rLayoutCondiments.setVisibility(View.GONE);
				rLayoutBread.setVisibility(View.VISIBLE);
				// condimentsArray.clear();
				// lLayout2_Condiments.removeView(checkBox_Condiments);
				//
			}
		});
		btnCancel_Condiments.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutCondiments.setVisibility(View.GONE);
				lLayout2_Size.removeView(radioGroup);
				// lLayout2_Condiments.removeAllViews();
			}
		});
		// rLayoutSpecialRequest...To be visible after Special requests is
		// clicked
		btnReview_SpecialRequests.setOnClickListener(new OnClickListener() {

			@SuppressLint("NewApi")
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// if(true){
				// rLayoutSpecialRequests.setVisibility(View.GONE);
				// rLayoutReviewItem.setVisibility(View.VISIBLE);
				//
				// tvSize_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_selected_size").toString());
				// tvSize_ReviewItem.setTextColor(Color.BLACK);
				//
				// tvBread_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_selected_bread").toString()
				// + ", " +
				// nameOfProducts_forTempValues.get(0).get("Product_selected_cheese").toString());
				// tvBread_ReviewItem.setTextColor(Color.BLACK);
				//
				// tvAssignName_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_assign_name").toString());
				// tvAssignName_ReviewItem.setTextColor(Color.BLACK);
				//
				// tvSpecialRequest_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_special_request").toString());
				// tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);
				//
				// }else{
				sandwichSpecial = etSandwich_Special.getText().toString();
				requestSpecial = etRequest_Special.getText().toString();

				if (sandwichSpecial.isEmpty()) {
					Toast.makeText(AddToCartActivity.this, "Please assign a name for this item",
							Toast.LENGTH_SHORT).show();
				} else {
					
					String str = pSize_radio;
					if (str.equalsIgnoreCase("S"))
						str = "Small (Plain)";
					if (str.equalsIgnoreCase("L"))
						str = "Large (Plain)";
					if (str.equalsIgnoreCase("SW"))
						str = "Small With Works";
					if (str.equalsIgnoreCase("LW"))
						str = "Large With Works";
					
					rLayoutSpecialRequests.setVisibility(View.GONE);
					rLayoutReviewItem.setVisibility(View.VISIBLE);
//					if (newCondimentsString.length() < 2)
//						tvSize_ReviewItem.setText(str);
					if(newCondimentsString.length()<2){
						if(str.equalsIgnoreCase("D"))
							tvSize_ReviewItem.setText("Dinner");
						else
						 tvSize_ReviewItem.setText(str);
						
					}
					else
						tvSize_ReviewItem.setText(str + " ("
								+ newCondimentsString + ")");
					update_check_new = pSize_radio;
					// tvSize_ReviewItem.setText(pSize_radio);
					tvSize_ReviewItem.setTextColor(Color.BLACK);
					// tvSize_ReviewItem.setText(pSize_radio);
					// tvSize_ReviewItem.setTextColor(Color.BLACK);
					//
					// tvBread_ReviewItem.setText(breadType + ", " +
					// cheeseType);
					tvBread_ReviewItem.setText(selectedBread + ", "
							+ selectedCheese);
					tvBread_ReviewItem.setTextColor(Color.BLACK);

					tvAssignName_ReviewItem.setText(sandwichSpecial);
					tvAssignName_ReviewItem.setTextColor(Color.BLACK);

					tvSpecialRequest_ReviewItem.setText(requestSpecial);
					tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);
					// newly added
					// tvCondimentsTotal_ReviewItem.setText(new
					// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
					// .toString())));
					tvCondimentsTotal_ReviewItem.setText(""
							+ new DecimalFormat("0.00").format((Double
									.valueOf(condimentsTotalPrice) * Double
									.parseDouble(quantity))));
					tvCondimentsTotal_ReviewItem.setTextColor(Color.BLACK);

					tvCondimentsTotal_ReviewItem.setTypeface(customFont);
					tvSize_ReviewItem.setTypeface(customFont);
					tvBread_ReviewItem.setTypeface(customFont);
					tvCondimentsTotal_ReviewItem.setTypeface(customFont);
					tvAssignName_ReviewItem.setTypeface(customFont);
					tvSpecialRequest_ReviewItem.setTypeface(customFont);
					// product_price_TXT1_Size.setText("PRICE: $"+new
					// DecimalFormat("0.00").format(productPrice *
					// Double.parseDouble(quantity)));
					// }
				}
			}
		});
		btnBack_SpecialRequests.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				/*
				 * etSandwich_Special.setText(null);
				 * etRequest_Special.setText(null);
				 */

				isSelectCondiments = Boolean.parseBoolean(nameOfProducts_forTempValues
						.get(0).get("isBreadCheeseOrNoy").toString());
				
				if(!isSelectCondiments){
				rLayoutSpecialRequests.setVisibility(View.GONE);
				rLayoutCondiments.setVisibility(View.VISIBLE);
				}else{
					rLayoutSize.setVisibility(View.VISIBLE);
					rLayoutSpecialRequests.setVisibility(View.GONE);
				}
				// rLayoutReviewItem.setVisibility(View.VISIBLE);
				// lLayout2_Condiments.removeView(checkBox_Condiments);
				// lLayout2_Condiments.removeAllViews();
			}
		});
		btnCancel_SpecialRequests.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSpecialRequests.setVisibility(View.GONE);
				lLayout2_Size.removeView(radioGroup);
				// lLayout2_Condiments.removeAllViews();
			}
		});
		// rLayoutReview...To be visible after Review & add to cart is
		// clicked
		btnAddToCart_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				quantity = etQuantity.getText().toString();
				if (quantity.isEmpty() || quantity.equalsIgnoreCase("")) {
					Toast.makeText(AddToCartActivity.this,
							"Please enter quantity", Toast.LENGTH_SHORT).show();
				} else {
					if (quantity.isEmpty() || Integer.parseInt(quantity) < 1
							|| Integer.parseInt(quantity) > 100) {
						Toast.makeText(
								AddToCartActivity.this,
								"Order quantity needs to be in between 1 to 99 only",
								Toast.LENGTH_SHORT).show();

					} else {
						rLayoutReviewItem.setVisibility(View.GONE);
						// rLayoutShoppingCart.setVisibility(View.VISIBLE);
						lLayoutTitle.setVisibility(View.GONE);

						// top_bar.setVisibility(View.VISIBLE);
						// list_rlyout.setVisibility(View.VISIBLE);,

						// updating product from cart
						psize_update = tvSize_ReviewItem.getText().toString();
						if(psize_update.equalsIgnoreCase("Dinner"))
							psize_update="D";
						selectedBread_update = tvBread_ReviewItem.getText()
								.toString();
						selectedCheese_update = tvBread_ReviewItem.getText()
								.toString();

						assign_name_update = tvAssignName_ReviewItem.getText()
								.toString().trim();
						special_request_update = tvSpecialRequest_ReviewItem
								.getText().toString().trim();

						condimentstotal_update = tvCondimentsTotal_ReviewItem
								.getText().toString().trim();
						if (condimentstotal_update == null
								|| condimentstotal_update.equalsIgnoreCase(""))
							condimentstotal_update = "0.0";
						else {
							try {
								double prictc = 0.0;
								prictc = Double
										.parseDouble(condimentstotal_update)
										/ (Integer.parseInt(quantity));

								condimentstotal_update = String.valueOf(prictc);
							} catch (NumberFormatException e) {
								// TODO: handle exception
								System.out.println("connnnnnnnnnnnnnn"
										+ condimenets_update);
							}
						}

						if (selectedBread.equalsIgnoreCase("")) {
							String str[] = selectedBread_update.split(",");
							selectedBread_update = str[0];
							selectedCheese_update = str[1];
						} else {
							selectedBread_update = selectedBread;
							selectedCheese_update = selectedCheese;
						}

						shortname_update = update_check_new;

						condimenets_update = selectedCondimentsArray.toString();
						for (int i = 0; i < selectedCondimentsArray.size(); i++) {
							System.out.println("ids::: for loop::"
									+ selectedCondimentsArray.get(i));
						}
						String str_slice = "0" ,str_slicename="";
						if (slices_fieldoptionidArray != null
								&& slices_fieldoptionidArray.size() > 1) {
							String[] str = newCondimentsString_slice.split("@");
							str_slice = str[1];
							str_slicename = str[0];
						}
						str_id = "";
						// newly added code
						if (!bread_typeID.equalsIgnoreCase("1"))
							str_id = bread_typeID + "*" + cheese_typeID + "*";

						for (int k = 0; k < selectedCondimentsArray.size(); k++) {

							for (int i = 0; i < condiments_fieldoptionidArray
									.size(); i++) {

								if (selectedCondimentsArray
										.get(k)
										.toString()
										.trim()
										.equalsIgnoreCase(
												condiments_fieldoptionidArray
														.get(i).cnmdname.trim())) {
									str_id += condiments_fieldoptionidArray
											.get(i).cnmdid + "*";
									break;
								}
							}
						}
						System.out.println("total ids :: " + str_id);
						if (!str_slice.equalsIgnoreCase("0"))
							str_id += str_slice;

						System.out.println("ids::::customprice:" + customprice);
						addToCartDatabase.upateProductFromCart(
								nameOfProducts_forTempValues.get(0)
										.get("Product_order_id").toString(),
								assign_name_update, special_request_update,
								update_check_new, quantity, customprice,
								condimentstotal_update,
								productPrice.toString(), shortname_update,
								fieldId, fieldOptionId, pickuptime_update,
								condimenets_update, selectedBread_update,
								selectedCheese_update, newCondimentsString,
								str_id, cheese_price_fname ,str_slicename);
						int cartCoun = addToCartDatabase.getTotalCartItem();
						if (cartCoun > 0) {
							TextView tempTextView = ((TextView) HomePageActivity.tabHost
									.getTabWidget().getChildTabViewAt(2)
									.findViewById(android.R.id.title));
							tempTextView.setText("CART (" + cartCoun + ")");
							tempTextView.setTypeface(customFont);
							tempTextView.setTextColor(Color.WHITE);
						} else {
							TextView tempTextView = ((TextView) HomePageActivity.tabHost
									.getTabWidget().getChildTabViewAt(2)
									.findViewById(android.R.id.title));
							tempTextView.setText("CART");
							tempTextView.setTypeface(customFont);
							tempTextView.setTextColor(Color.WHITE);
						}
						iscartRefresh =true;
						new FetchItemList().execute();

					}
				}
			}
		});
		btnCancel_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				top_bar.setVisibility(View.VISIBLE);
				list_rlyout.setVisibility(View.VISIBLE);

				rLayoutReviewItem.setVisibility(View.GONE);

				lLayout2_Size.removeView(radioGroup);
				lLayout2_Condiments.removeAllViews();
				iscartRefresh =true;
//				listviewCart.setAdapter(addToCartAdapter);
				new FetchItemList().execute();
			}
		});
		btnEdit1_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutReviewItem.setVisibility(View.GONE);
				rLayoutSize.setVisibility(View.VISIBLE);

				product_price_TXT1_Size.setText("PRICE: $"
						+ new DecimalFormat("0.00").format(productPrice
								* Double.parseDouble(quantity)));
				// if(isPsizeFlag)
				// setSelectSizeCustomData();
			}
		});

		btnEdit2_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				product_price_TXT1_Size.setText("PRICE: $"
						+ new DecimalFormat("0.00").format(productPrice
								* Double.parseDouble(quantity)));
				rLayoutReviewItem.setVisibility(View.GONE);
				rLayoutBread.setVisibility(View.VISIBLE);
				// lLayout2_Condiments.removeAllViews();
				// setSelectSizeCustomData();
				// condiments_msg1 = new String();
				// condiments_msg2 = new String();
				// new GetCondimentsAsync().execute();
			}
		});
		btnEdit3_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				// newly added method
				// product_price_TXT1_Size.setText("PRICE: $"+new
				// DecimalFormat("0.00").format(productPrice));
				rLayoutReviewItem.setVisibility(View.GONE);
				// lLayout2_Condiments.removeAllViews();
				// settingCondinments();

				// lLayout2_Condiments.removeAllViews();
				// if(condiments_msg1.length()==0 ||
				// condiments_msg2.length()==0){
				// setSelectSizeCustomData();
				// // condiments_msg1 = new String();
				// // condiments_msg2 = new String();
				// new GetCondimentsAsync1().execute();
				// }
				// condimentsArrayBuilder = new StringBuilder();
				// condimentsBuilder = new StringBuilder();
				//
				// // new GetCondimentsAsync().execute();
				// if (condiments_msg1.isEmpty()
				// || condiments_msg1.equalsIgnoreCase("")) {
				//
				// for (int i = 0; i < condimentsArray.size(); i++) {
				// // System.out.println("Value of the Size========"
				// // + arr.get(i).get(productName).toString());
				// j = i;
				// checkBox_Condiments = new CheckBox(
				// AddToCartActivity.this);
				// // checkBox_Condiments.setText(condiments[i]);
				// checkBox_Condiments.setText(condimentsArray.get(i));
				// condimentsArrayBuilder.append(condimentsArray.get(i)
				// .toString() + ",");
				// // + " +$" + condimentsPriceArray.get(i));
				// checkBox_Condiments.setTextColor(Color.BLACK);
				// checkBox_Condiments.setTypeface(customFont);
				//
				// checkBox_Condiments
				// .setOnClickListener(getOnClickDoSomething(checkBox_Condiments));
				// lLayout2_Condiments.addView(checkBox_Condiments);
				// }
				// } else {
				// TextView tv = new TextView(AddToCartActivity.this);
				//
				// tv.setText(Html.fromHtml(condiments_msg1 + ":<BR></BR>"));
				// tv.append(condiments_msg2);
				// tv.setTextColor(Color.BLACK);
				// tv.setTextSize(18);
				// tv.setTypeface(customFont);
				// lLayout2_Condiments.addView(tv);
				// }
				rLayoutCondiments.setVisibility(View.VISIBLE);

			}
			// View.OnClickListener getOnClickDoSomething(final Button button) {
			// return new View.OnClickListener() {
			// public void onClick(View v) {
			//
			// condimentsBuilder.append(button.getText().toString()
			// + ",");
			// }
			// };
			// }
		});
		btnEdit4_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				product_price_TXT1_Size.setText("PRICE: $"
						+ new DecimalFormat("0.00").format(productPrice
								* Double.parseDouble(quantity)));
				rLayoutReviewItem.setVisibility(View.GONE);
				rLayoutSpecialRequests.setVisibility(View.VISIBLE);

			}
		});
		btnEdit5_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutReviewItem.setVisibility(View.GONE);
				rLayoutSpecialRequests.setVisibility(View.VISIBLE);

			}
		});

		// rLayoutShoppingCart...To be visible after Continue to checkout is
		// clicked
		btnCheckout_ShoppingCart.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// rLayoutShoppingCart.setVisibility(View.GONE);
				String weekDay;
				SimpleDateFormat dayFormat = new SimpleDateFormat("EEEE", Locale.US);

				Calendar calendar = Calendar.getInstance();
				weekDay = dayFormat.format(calendar.getTime());
				notAvailableProductlist.clear();
//				List<Integer> notAvailableProductlist = new ArrayList<Integer>();
				String productDay="";
				if (nameOfProducts1.size() != 0) {
					String title="Delete Item!";
					String txtMessage="This item is only available on <day>";
					for(int i=0; i<nameOfProducts1.size();i++){
						 productDay=pDatabase.getProductAvailableDay(nameOfProducts1
								.get(i).get("Product_Id").toString());
						
						if(!productDay.toString().contains(weekDay) && !productDay.toString().equalsIgnoreCase("0")){
							notAvailableProductlist.add(i);
						}
							else
								continue;
					}
					/**checking all item available or not if it is not then delete it.*/
					if(notAvailableProductlist.size()>0){						
//						showProductNotAvailableDialog("This item is only available on "+nameOfProducts1.get(arg2).get("product_day_available").toString());
						if(notAvailableProductlist.size()>1){		
						 title="Delete Items!";
						 txtMessage = "There are few items, which is not available on "+weekDay +". Do you want to delete such items from cart and continue checkout ";
						}else{
							 title="Delete Item!";
							 txtMessage = "One item from selected items is not available on "+weekDay +". Do you want to delete that item from cart and continue checkout ";
						}
							
							final Dialog AlretDialog = new Dialog(AddToCartActivity.this,
									android.R.style.Theme_Translucent_NoTitleBar);
							AlretDialog.requestWindowFeature(1);
							AlretDialog.setContentView(R.layout.product_not_available_cart);
							AlretDialog.setCancelable(false);
							Button ok_btnshowdialog = (Button) AlretDialog
									.findViewById(R.id.ok_btn);
							Button cancel_btn = (Button) AlretDialog
									.findViewById(R.id.cancel_btn);
							TextView cart_not_available = (TextView) AlretDialog
									.findViewById(R.id.cart_not_available);
							cart_not_available.setText(title);
							TextView delete_cart_item_message = (TextView) AlretDialog
									.findViewById(R.id.delete_cart_item_message);
							delete_cart_item_message.setText(txtMessage);
							
							ok_btnshowdialog.setOnClickListener(new OnClickListener() {
								@Override
								public void onClick(View v) {
									AlretDialog.dismiss();
									
									for (int i = 0; i < notAvailableProductlist.size(); i++) {
										addToCartDatabase.deleteCartProduct(nameOfProducts1
												.get(notAvailableProductlist.get(i)).get("Product_order_id").toString());
										nameOfProducts1.remove(notAvailableProductlist.get(i));
									}
								
									new FetchItemList().execute();
									int cartCount = addToCartDatabase.getTotalCartItem();

									if (cartCount > 0) {
										TextView tempTextView = ((TextView) HomePageActivity.tabHost
												.getTabWidget().getChildTabViewAt(2)
												.findViewById(android.R.id.title));
										tempTextView.setText("CART (" + cartCount + ")");
										tempTextView.setTypeface(customFont);
										tempTextView.setTextColor(Color.WHITE);
									} else {
										TextView tempTextView = ((TextView) HomePageActivity.tabHost
												.getTabWidget().getChildTabViewAt(2)
												.findViewById(android.R.id.title));
										tempTextView.setText("CART");
										tempTextView.setTypeface(customFont);
										tempTextView.setTextColor(Color.WHITE);
									}

								}
							});
							cancel_btn.setOnClickListener(new OnClickListener() {

								@Override
								public void onClick(View v) {
									// TODO Auto-generated method stub
									AlretDialog.dismiss();
								}
							});
							AlretDialog.show();

						
					}else{
						iscartRefresh=false;
					top_bar.setVisibility(View.GONE);
					lLayoutTitle.setVisibility(View.GONE);
					rLayoutReviewItem.setVisibility(View.GONE);
					rLayoutSize.setVisibility(View.GONE);
					rLayoutBread.setVisibility(View.GONE);
					rLayoutCondiments.setVisibility(View.GONE);
					rLayoutSpecialRequests.setVisibility(View.GONE);
					rLayoutSize_slice.setVisibility(View.GONE);
					
					rLayoutOrderInfo.setVisibility(View.VISIBLE);
					etPickUp_OrderInfo.setText("");
					if (LoginTabActivity.issUserLogin) {
						LocalSettings.Load();
						if (LocalSettings.fname.length() > 2)
							etFirstName_OrderInfo.setText(LocalSettings.fname);
						if (LocalSettings.lname.length() > 2)
							etLastName_OrderInfo.setText(LocalSettings.lname);
						if (LocalSettings.email_id.length() > 2)
							etEmailId_OrderInfo.setText(LocalSettings.email_id);
						if (LocalSettings.phone_no.length() > 2)
							etPhone_OrderInfo.setText(LocalSettings.phone_no);
						// if(LocalSettings.cmpy_nmae!=null)
						// etCompany_OrderInfo.setText(LocalSettings.cmpy_nmae);
						// etPickUp_OrderInfo.setText(LocalSettings.dtstart);
					} else {
						etFirstName_OrderInfo.setText("");
						etLastName_OrderInfo.setText("");
						etEmailId_OrderInfo.setText("");
						etPhone_OrderInfo.setText("");
						etCompany_OrderInfo.setText("");
					}
					}
				} else
					Toast.makeText(AddToCartActivity.this,
							"There are no items in the cart...",
							Toast.LENGTH_SHORT).show();
				// etFirstName_OrderInfo.setText(CategoryDto.userFname);
				// etLastName_OrderInfo.setText(CategoryDto.user_lname);
				// etEmailId_OrderInfo.setText(CategoryDto.email);
				// etPhone_OrderInfo.setText(CategoryDto.user_phone);
				// etCompany_OrderInfo.setText(CategoryDto.user_company);
				// etPickUp_OrderInfo.setText(CategoryDto.pickup_Time);

			}
		});
		// rLayoutShoppingCart...To be visible after Place your order is
		// clicked
		btnPlaceOrder_OrderInfo.setOnClickListener(new OnClickListener() {

			@SuppressLint("NewApi")
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (cd.isConnectingToInternet()) {
					fName = etFirstName_OrderInfo.getText().toString();
					lName = etLastName_OrderInfo.getText().toString();
					email = etEmailId_OrderInfo.getText().toString();
					phone = etPhone_OrderInfo.getText().toString();
					company = etCompany_OrderInfo.getText().toString();
					pickUpTime = etPickUp_OrderInfo.getText().toString().trim();

					if (fName.isEmpty() || lName.isEmpty() || email.isEmpty()
							|| phone.isEmpty()) {
						Toast.makeText(AddToCartActivity.this,
								"Please enter required details",
								Toast.LENGTH_SHORT).show();
					} else {
						if (CheckValidation()) {

							if (LoginTabActivity.issUserLogin
									&& company.length() > 1) {

								if (LocalSettings.phone_no.length() < 2
										&& LocalSettings.cmpy_nmae.length() < 2
										&& LocalSettings.fname.length() < 2)
									new UpdateProfile("pca").execute();
								else if (LocalSettings.phone_no.length() < 2
										&& LocalSettings.cmpy_nmae.length() < 2)
									new UpdateProfile("pc").execute();
								else if (LocalSettings.cmpy_nmae == null
										|| LocalSettings.cmpy_nmae.length() < 2)
									new UpdateProfile("c").execute();
							}

							new PlaceOrderToServerSide().execute();

						}

					}
				} else {
					showAlertDialog_finish(AddToCartActivity.this,
							"No Internet Connection",
							"Please check your internet connection", false);
				}
				// else {
				// // addToCart.setCustomprice(customprice);
				// // addToCart.setFieldId(fieldId);
				// // addToCart.setFieldOptionId(fieldOptionId);
				//
				// // addToCart = new AddToCart(product_id, product_name,
				// // productDescription, productImage, pSize,
				// // customprice, short_name, fieldId, fieldOptionId,
				// // condimentsBuilder.toString(), fName, lName, email,
				// // phone, company, pickUpTime, condimentsArrayBuilder
				// // .toString(), breadBuilder.toString(),
				// // cheeseBuilder.toString(), quantity,);
				// // addToCartDatabase = new AddToCartDatabase(
				// // AddToCartActivity.this);
				// // addToCartDatabase.addProductsToCart(addToCart);
				//
				// new PlaceOrderToServerSide().execute();
				// // rLayoutOrderInfo.setVisibility(View.GONE);
				// // rLayoutThankYou.setVisibility(View.VISIBLE);
				//
				// }
			}
		});

		btnOkThankYou.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				pSize = "";
				sandwichSpecial = "";
				requestSpecial = "";
				pSize_radio = "";
				breadType = "";
				cheeseType = "";

				lLayout2_Size.removeAllViews();
				lLayout2_Condiments.removeAllViews();
				etSandwich_Special.setText(null);
				etRequest_Special.setText(null);
				
				//empty cart
				addToCartDatabase.deleteCart();
				TextView tempTextView = ((TextView) HomePageActivity.tabHost
						.getTabWidget().getChildTabViewAt(2)
						.findViewById(android.R.id.title));
				tempTextView.setText("CART");
				tempTextView.setTypeface(customFont);
				tempTextView.setTextColor(Color.WHITE);
				
				top_bar.setVisibility(View.VISIBLE);
				list_rlyout.setVisibility(View.VISIBLE);

				lLayoutTitle.setVisibility(View.GONE);
				rLayoutSize.setVisibility(View.GONE);
				rLayoutThankYou.setVisibility(View.GONE);
				HomePageActivity.tabHost.setCurrentTab(0);
			}
		});
		etQuantity.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence cs, int arg1, int arg2,
					int arg3) {

			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1,
					int arg2, int arg3) {

			}

			@Override
			public void afterTextChanged(Editable arg0) {
				try {
					quantity = etQuantity.getText().toString();
					product_price_TXT1_Size.setText("PRICE: $"
							+ new DecimalFormat("0.00").format(productPrice
									* Double.parseDouble(quantity)));
					if (ispriceadded)
						tvCondimentsTotal_ReviewItem.setText(new DecimalFormat(
								"0.00").format(Double
								.valueOf(nameOfProducts_forTempValues.get(0)
										.get("Product_condimentsTotalPrice"))
								* Double.parseDouble(quantity)));
					else
						tvCondimentsTotal_ReviewItem.setText(new DecimalFormat(
								"0.00").format(Double
								.valueOf(condimentsTotalPrice)
								* Double.parseDouble(quantity)));
					// product_price_TXT1_Size.setText("PRICE: $"+new
					// DecimalFormat("0.00").format(Double.valueOf((Double.parseDouble(nameOfProducts1.get(selectedItemIndex).get("Product_productprice").toString()))*
					// Double.parseDouble(quantity))));
				} catch (NumberFormatException e) {

				}
			}
		});
		etQuantity.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (!hasFocus) {
					hideKeyboard();
				}

			}
		});
		btnBack_Size_slice.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSize_slice.setVisibility(View.GONE);
				rLayoutSize.setVisibility(View.VISIBLE);
			}
		});

		btnEditslice_ReviewItem.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				// product_price_TXT1_Size.setText("PRICE: $"+new
				// DecimalFormat("0.00").format(Double.valueOf(productPrice)));
				rLayoutReviewItem.setVisibility(View.GONE);
				rLayoutSize_slice.setVisibility(View.VISIBLE);
			}
		});

		btnSelectBread_Size_slice.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				rLayoutSize_slice.setVisibility(View.GONE);
				rlayoutforeditsizeslice.setVisibility(View.VISIBLE);
				if (isSpecialTypeShoworNot.equalsIgnoreCase("0")) {
					rLayoutSpecialRequests.setVisibility(View.GONE);
					String[] str = newCondimentsString_slice.split("@");
					tvSize_ReviewItemslice.setText(str[0]);
					
					String str_s = pSize_radio;
					if (str_s.equalsIgnoreCase("S"))
						str_s = "Small (Plain)";
					if (str_s.equalsIgnoreCase("L"))
						str_s = "Large (Plain)";
					if (str_s.equalsIgnoreCase("SW"))
						str_s = "Small With Works";
					if (str_s.equalsIgnoreCase("LW"))
						str_s = "Large With Works";
					if (isSelectCondiments) {

						rlayoutforeditbreadcheese.setVisibility(View.GONE);
						rlayoutforeditcondiments.setVisibility(View.GONE);

						rLayoutReviewItem.setVisibility(View.VISIBLE);

						rlayoutforeditassignname.setVisibility(View.GONE);
						rlayoutforeditspecialrequestnew
								.setVisibility(View.GONE);
//						if (newCondimentsString.length() < 2)
//							tvSize_ReviewItem.setText(str_s);
						if(newCondimentsString.length()<2){
							if(str_s.equalsIgnoreCase("D"))
								tvSize_ReviewItem.setText("Dinner");
							else
							 tvSize_ReviewItem.setText(str_s);
							
						}
						else
							tvSize_ReviewItem.setText(str_s + " ("
									+ newCondimentsString + ")");
						tvSize_ReviewItem.setTextColor(Color.BLACK);
						tvSize_ReviewItem.setTypeface(customFont);

						tvBread_ReviewItem.setText(selectedBread + ", "
								+ selectedCheese);
						tvBread_ReviewItem.setTextColor(Color.BLACK);
						tvBread_ReviewItem.setTypeface(customFont);

						// tvCondimentsTotal_ReviewItem.setText(""+new
						// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
						// .toString())));
						tvCondimentsTotal_ReviewItem.setText(""
								+ new DecimalFormat("0.00").format((Double
										.valueOf(condimentsTotalPrice) * Double
										.parseDouble(quantity))));
						tvCondimentsTotal_ReviewItem.setTextColor(Color.BLACK);
						tvCondimentsTotal_ReviewItem.setTypeface(customFont);

					} else {
						rLayoutSpecialRequests.setVisibility(View.GONE);
						rLayoutReviewItem.setVisibility(View.VISIBLE);

						rlayoutforeditbreadcheese.setVisibility(View.GONE);
						rlayoutforeditcondiments.setVisibility(View.GONE);

//						if (newCondimentsString.length() < 2)
//							tvSize_ReviewItem.setText(str_s);
						if(newCondimentsString.length()<2){
							if(str_s.equalsIgnoreCase("D"))
								tvSize_ReviewItem.setText("Dinner");
							else
							 tvSize_ReviewItem.setText(str_s);
							
						}
						else
							tvSize_ReviewItem.setText(str_s + " ("
									+ newCondimentsString + ")");
						tvSize_ReviewItem.setTextColor(Color.BLACK);
						tvSize_ReviewItem.setTypeface(customFont);

						tvBread_ReviewItem.setText(selectedBread + ", "
								+ selectedCheese);
						tvBread_ReviewItem.setTextColor(Color.BLACK);
						tvBread_ReviewItem.setTypeface(customFont);

						// tvCondimentsTotal_ReviewItem.setText(new
						// DecimalFormat("0.00").format(Double.valueOf(condimentsTotalPrice
						// .toString())));
						tvCondimentsTotal_ReviewItem.setText(""
								+ new DecimalFormat("0.00").format((Double
										.valueOf(condimentsTotalPrice) * Double
										.parseDouble(quantity))));
						tvCondimentsTotal_ReviewItem.setTextColor(Color.BLACK);
						tvCondimentsTotal_ReviewItem.setTypeface(customFont);
					}

				} else
					rLayoutSpecialRequests.setVisibility(View.VISIBLE);
			}
		});
		
		etSandwich_Special.setFilters(new InputFilter[]{assigntxt_Filter,new InputFilter.LengthFilter(25)});
		
//		etSandwich_Special.setFilters(new InputFilter[] { filter,new InputFilter.LengthFilter(25) });
		new FetchItemList().execute();
	}
	InputFilter filter = new InputFilter() {

		@Override
		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {
			// TODO Auto-generated method stub

			for (int i = start; i < end; i++) {
				if (!Character.isLetterOrDigit(source.charAt(i))) {

					if (dstart != 0 && source.equals(" ")) {
						return " ";
					}

				}
			}
			return null;
		}
	};
	InputFilter filterSpecial = new InputFilter() {
		@Override
		public CharSequence filter(CharSequence source, int start, int end,
				Spanned dest, int dstart, int dend) {
			// TODO Auto-generated method stub

			for (int i = start; i < end; i++) {
				if (!Character.isLetterOrDigit(source.charAt(i))) {

					// if (doingEdit == true) {
					// doingEdit = false;
					// return source;
					// }
					if (dstart != 0 && source.equals(" ")) {
						return " ";
					}
					if (dstart != 0 && source.equals("-")) {
						return "-";
					}
					if (dstart != 0 && source.equals("_")) {
						return "-";
					}
					if (dstart != 0 && source.equals("&")) {
						return "&";
					}
					if (dstart != 0 && source.equals("#")) {
						return "#";
					}
					if (dstart != 0 && source.equals(".")) {
						return ".";
					}
					if (dstart != 0 && source.equals("@")) {
						return "@";
					}
					return "";
				}
				// }
				// doingEdit = true;
			}
			return null;
		}
	};
	public void showPopUp() {
		dialog = new Dialog(AddToCartActivity.this,
				android.R.style.Theme_Translucent_NoTitleBar);
		dialog.setContentView(R.layout.timepicker);
		dialog.setCancelable(true);

		Button set_btn = (Button) dialog.findViewById(R.id.set_btn);
		Button cancel_btn = (Button) dialog.findViewById(R.id.cancel_btn);
	    timepicker = (TimePicker) dialog.findViewById(R.id.timepicker);
		timepicker.setCurrentHour(hour);
		timepicker.setCurrentMinute(minute);
		// Button cancle_btn = (Button) dialog.findViewById(R.id.BTN_Cancel);

		dialog.setCancelable(true);
		dialog.show();
		set_btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				int hr ,min;
				String hr_str ,min_str;
				hr = timepicker.getCurrentHour();
				min = timepicker.getCurrentMinute();
				if(hr < 10)
					hr_str = "0" + hr;
				else
					hr_str=String.valueOf(timepicker.getCurrentHour());
				if(min < 10)
					min_str = "0" + min;
				else
					min_str=String.valueOf(timepicker.getCurrentMinute());
				dialog.dismiss();
//				etPickUp_OrderInfo.setText(timepicker.getCurrentHour() + ":" + timepicker.getCurrentMinute() );
				etPickUp_OrderInfo.setText(hr_str + ":" + min_str );
				// new TimePickerDialog(AddToCartActivity.this,timePickerListener, hour, minute,false);
			}
		});
		cancel_btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
				etPickUp_OrderInfo.setText("");
			}
		});
	}
	
	private void hideKeyboard() {
		InputMethodManager imm = (InputMethodManager) AddToCartActivity.this
				.getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(etQuantity.getWindowToken(), 0);
	}

	public void optionalTime() {
		Calendar mcurrentTime = Calendar.getInstance();
		int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
		int minute = mcurrentTime.get(Calendar.MINUTE);
		TimePickerDialog mTimePicker;
		mTimePicker = new TimePickerDialog(AddToCartActivity.this,
				new TimePickerDialog.OnTimeSetListener() {
					@Override
					public void onTimeSet(TimePicker timePicker,
							int selectedHour, int selectedMinute) {
						etPickUp_OrderInfo.setText(selectedHour + ":"
								+ selectedMinute);
					}
				}, hour, minute, true);// Yes 24 hour time
		mTimePicker.setTitle("Select Time");
		mTimePicker.show();
	}

	private boolean CheckValidation() {
		boolean flag = true;

		if (!validateEmail(email)) {
			Toast.makeText(AddToCartActivity.this,
					"Please enter valid email id like xyz@gmail.com",
					Toast.LENGTH_SHORT).show();
			etEmailId_OrderInfo.requestFocus(etEmailId_OrderInfo.length());
			flag = false;

		} else if (!validatePhoneNumber(phone)) {
			Toast.makeText(AddToCartActivity.this,
					"Please enter valid phone number containing 10 digits",
					Toast.LENGTH_SHORT).show();
			etPhone_OrderInfo.requestFocus(etPhone_OrderInfo.length());
			flag = false;
		} else if (!fName.matches("^[a-zA-Z]+$")) {
			Toast.makeText(AddToCartActivity.this,
					"Please enter valid firstname !", Toast.LENGTH_SHORT)
					.show();
			etFirstName_OrderInfo.requestFocus(etFirstName_OrderInfo.length());
			flag = false;
		} else if (!lName.matches("^[a-zA-Z]+$")) {
			Toast.makeText(AddToCartActivity.this,
					"Please enter valid lastname !", Toast.LENGTH_SHORT).show();
			etLastName_OrderInfo.requestFocus(etLastName_OrderInfo.length());
			flag = false;
		}
		// else if(!company.matches("^[a-zA-Z]+$")){
		// Toast.makeText(AddToCartActivity.this,
		// "Please enter valid company name !", Toast.LENGTH_SHORT).show();
		// flag = false;
		// }

		return flag;

	}

	public static boolean validateEmail(final String hex) {
		pattern = Pattern.compile(EMAIL_VALID_PATTERN);
		matcher = pattern.matcher(hex);
		return matcher.matches();
	}

	public static boolean validatePhoneNumber(final String hex) {
		pattern = Pattern.compile(PHONE_NUMBER);
		matcher = pattern.matcher(hex);
		return matcher.matches();
	}

	// public void setImgeBitmapImageView() {
	// this.imageLoader_main.DisplayImage(nameOfProducts1.get(selectedItemIndex).get("Product_Image")
	// .toString(), this.ivProductImage);
	//
	// name_TXT_Size.setText(nameOfProducts1.get(selectedItemIndex).get("Product_Name").toString());
	// name_TXT1_Size.setText(nameOfProducts1.get(selectedItemIndex).get("Product_Description").toString().toString());
	// product_price_TXT1_Size.setText("PRICE: $"+new
	// DecimalFormat("0.00").format(Double.valueOf(nameOfProducts1.get(selectedItemIndex).get("Product_productprice").toString().toString())));
	// }

	public void settingCondinments() {
		// newl added code here
		// condimentsArray.clear();
		if (condiments_msg1.isEmpty() || condiments_msg1.equalsIgnoreCase("")) {
			selectedCondimentsArray.clear();
			lLayout2_Condiments.removeAllViews();
			// //newly added
			// condimentsTotalPrice=0.0;
			for (int i = 0; i < condimentsArray.size(); i++) {
				j = i;
				checkBox_Condiments = new CheckBox(AddToCartActivity.this);
				checkBox_Condiments.setText(condimentsArray.get(i) + " + $"
						+ condimentsPriceArray.get(i));
				checkBox_Condiments.setTextColor(Color.BLACK);
				checkBox_Condiments.setTypeface(customFont);
				checkBox_Condiments
						.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {

							@Override
							public void onCheckedChanged(
									CompoundButton buttonView, boolean isChecked) {
								// TODO Auto-generated method stub

								String s = buttonView.getText().toString();
								s = s.replace("+ $", "@");
								String[] strTemp = s.split("@");
								tempPrice = Double.parseDouble(strTemp[1]);
								ispriceadded = false;
								if (isChecked) {
									selectedCondimentsArray.add(strTemp[0]);
									boolean flag = true;
									for (int j = 0; j < condiments_types.size(); j++) {
										if ((condiments_types.get(j).trim())
												.equalsIgnoreCase(strTemp[0]
														.toString().trim())) {
											flag = false;
											break;
										}
									}
									if (flag)
										condiments_types.add(strTemp[0]
												.toString().trim());
									condimentsTotalPrice = condimentsTotalPrice
											+ tempPrice;
									productPrice = productPrice + tempPrice;
									product_price_TXT1_Size.setText("PRICE: $"
											+ new DecimalFormat("0.00").format(Double
													.valueOf(productPrice)
													* Double.parseDouble(quantity)));
									product_price_TXT1_Size
											.setTypeface(customFontBold);
								} else {
									selectedCondimentsArray.remove(strTemp[0]);
									condiments_types.remove(strTemp[0].trim());
									productPrice = productPrice - tempPrice;
									condimentsTotalPrice = condimentsTotalPrice
											- tempPrice;
									// for new changes
									// product_price_TXT1_Size.setText("PRICE: $"+new
									// DecimalFormat("0.00").format(Double.valueOf(productPrice)
									// + Double.valueOf(cheese_price_fname)));
									product_price_TXT1_Size.setText("PRICE: $"
											+ new DecimalFormat("0.00").format(Double
													.valueOf(productPrice)
													* Double.parseDouble(quantity)));
								}
							}
						});

				for (int j = 0; j < condiments_types.size(); j++) {
					if ((condiments_types.get(j).trim())
							.equalsIgnoreCase((condimentsArray.get(i).trim()))) {
						System.out.println("chara matched ::::  "
								+ condiments_types.get(j));
						checkBox_Condiments.setChecked(true);
						break;
					}

				}
				condimentsTotalPrice = round(condimentsTotalPrice, 3);
				productPrice = round(productPrice, 3);
				lLayout2_Condiments.addView(checkBox_Condiments);
				newCondimentsString = "0";
			}
		} else {

			lLayout2_Condiments.removeAllViews();
			lLayout2_Condiments.setOrientation(LinearLayout.VERTICAL);
			radioGroup1 = new RadioGroup(AddToCartActivity.this);
			radioGroup1.setOrientation(RadioGroup.VERTICAL);
			// radioGroup1.setGravity(Gravity.CENTER_HORIZONTAL);
			// radioGroup1.setWeightSum(1);
			rb1 = new RadioButton[3];

			rb1[0] = new RadioButton(AddToCartActivity.this);
			radioGroup1.addView(rb1[0]);
			
			rb1[1] = new RadioButton(AddToCartActivity.this);
			radioGroup1.addView(rb1[1]);

			rb1[2] = new RadioButton(AddToCartActivity.this);
			radioGroup1.addView(rb1[2]);

			rb1[0].setText("NO PEPPERS");
			rb1[0].setTextColor(Color.BLACK);
			rb1[0].setTypeface(customFont);
			
			rb1[1].setText("MILD PEPPERSS");
			rb1[1].setTextColor(Color.BLACK);
			rb1[1].setTypeface(customFont);

			rb1[2].setText("HOT PEPPERS");
			rb1[2].setTextColor(Color.BLACK);
			rb1[2].setTypeface(customFont);
			if (newCondimentsString.equalsIgnoreCase("HOT PEPPERS")) {
				rb1[2].setChecked(true);
				newCondimentsString = "HOT PEPPERS";
			}else if (newCondimentsString.equalsIgnoreCase("MILD PEPPERSS")) {
				rb1[1].setChecked(true);
				newCondimentsString = "MILD PEPPERSS";
			} 
			else {
				rb1[0].setChecked(true);
				newCondimentsString = "NO PEPPERS";
			}
			radioGroup1
					.setOnCheckedChangeListener(new OnCheckedChangeListener() {

						@Override
						public void onCheckedChanged(RadioGroup group,
								int checkedId) {
							// TODO Auto-generated method stub

							int selected = group.getCheckedRadioButtonId();
							System.out
									.println("The value of checked button============"
											+ selected);
							// pSize = rb[0].getText().toString();
							newCondimentsString = ((RadioButton) AddToCartActivity.this
									.findViewById(group
											.getCheckedRadioButtonId()))
									.getText().toString();
							System.out.println("kkkkk" + newCondimentsString);
						}

					});
			lLayout2_Condiments.addView(radioGroup1);

			TextView tv = new TextView(AddToCartActivity.this);

			tv.setText(Html.fromHtml(condiments_msg1 + ":<BR></BR>"));
			tv.append(condiments_msg2);
			tv.setTextColor(Color.BLACK);
			tv.setTextSize(15);
			tv.setPadding(20, 2, 5, 5);
			tv.setTypeface(customFont);
			lLayout2_Condiments.addView(tv);
		}
		System.out.println("change price:::: cheese_price_fname "
				+ cheese_price_fname);
		// product_price_TXT1_Size.setText("PRICE: $"+new
		// DecimalFormat("0.00").format(Double.valueOf(productPrice) +
		// Double.valueOf(cheese_price_fname)));
	}

	// newly added code
	public void setImgeBitmapImageView() {
		this.imageLoader_main.DisplayImage(nameOfProducts_forTempValues.get(0)
				.get("Product_Image").toString(), this.ivProductImage);

		name_TXT_Size.setText(nameOfProducts_forTempValues.get(0)
				.get("Product_Name").toString());
		// name_TXT1_Size.setText(nameOfProducts_forTempValues.get(0).get("Product_Description").toString().toString());
		product_price_TXT1_Size.setText("PRICE: $"
				+ new DecimalFormat("0.00").format((Double
						.valueOf(nameOfProducts_forTempValues.get(0)
								.get("Product_Price").toString()) * Double
						.valueOf(nameOfProducts_forTempValues.get(0)
								.get("Product_Qnty").toString()))));
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		HomepageTabActvity.postionOfActivity = 2;
		OrderTabActivity.isOrderRefresh = false;
		
		if(iscartRefresh && isrefreshCount>0){
			new FetchItemList().execute();
//		nameOfProducts1 = addToCartDatabase.getProductListFromCart();
//		addToCartAdapter.notifyDataSetChanged();
		}
		isrefreshCount++;
//		new FetchItemList().execute();
		// if (!check_onResumeCalled) {
		// new FetchItemList().execute();
		// }
		// if (AddToCartActivity.boolAddToCart) {

		/*
		 * rLayoutReviewItem.setVisibility(View.GONE);
		 * lLayoutTitle.setVisibility(View.GONE);
		 */

		// rLayoutSize.setVisibility(View.VISIBLE);
		// }
		int cartCoun = addToCartDatabase.getTotalCartItem();
		if (cartCoun > 0) {
			TextView tempTextView = ((TextView) HomePageActivity.tabHost
					.getTabWidget().getChildTabViewAt(2)
					.findViewById(android.R.id.title));
			tempTextView.setText("CART (" + cartCoun + ")");
			tempTextView.setTypeface(customFont);
			tempTextView.setTextColor(Color.WHITE);
		} else {
			TextView tempTextView = ((TextView) HomePageActivity.tabHost
					.getTabWidget().getChildTabViewAt(2)
					.findViewById(android.R.id.title));
			tempTextView.setText("CART");
			tempTextView.setTypeface(customFont);
			tempTextView.setTextColor(Color.WHITE);
		}

//		if (AddToCartActivity.isRefreshAdapter) {
//			AddToCartActivity.isRefreshAdapter = false;
//			new FetchItemList().execute();
//
//		}
		if (LoginTabActivity.issUserLogin) {
			LocalSettings.Load();
			if (LocalSettings.fname.length() > 2)
				etFirstName_OrderInfo.setText(LocalSettings.fname);
			if (LocalSettings.lname.length() > 2)
				etLastName_OrderInfo.setText(LocalSettings.lname);
			if (LocalSettings.email_id.length() > 2)
				etEmailId_OrderInfo.setText(LocalSettings.email_id);
			if (LocalSettings.phone_no.length() > 2)
				etPhone_OrderInfo.setText(LocalSettings.phone_no);
			if (LocalSettings.cmpy_nmae.length() > 2)
				etCompany_OrderInfo.setText(LocalSettings.cmpy_nmae);

			etEmailId_OrderInfo.setEnabled(false);
			// etEmailId_OrderInfo.setClickable(false);
			// etEmailId_OrderInfo.setFocusable(false);
			// etFirstName_OrderInfo.setText(LocalSettings.fname);
			// etLastName_OrderInfo.setText(LocalSettings.lname);
			// etEmailId_OrderInfo.setText(LocalSettings.email_id);
			// etPhone_OrderInfo.setText(LocalSettings.phone_no);

			// etCompany_OrderInfo.setText(LocalSettings.cmpy_nmae);
			// etPickUp_OrderInfo.setText(LocalSettings.dtstart);
		} else {
			etFirstName_OrderInfo.setText("");
			etLastName_OrderInfo.setText("");
			etEmailId_OrderInfo.setText("");
			etPhone_OrderInfo.setText("");
			etCompany_OrderInfo.setText("");
			etEmailId_OrderInfo.setEnabled(true);
			etEmailId_OrderInfo.setClickable(true);
			etEmailId_OrderInfo.setFocusable(true);
		}
		System.out.println("On Resume called*******************");
	}

	public void setAddtoCartEditValues() {

		quantity = nameOfProducts_forTempValues.get(0).get("Product_Qnty")
				.toString();
		changecheeseprice = 0.0;

		rLayoutSpecialRequests.setVisibility(View.GONE);
		rLayoutReviewItem.setVisibility(View.VISIBLE);
		isSelectCondiments = Boolean.parseBoolean(nameOfProducts_forTempValues
				.get(0).get("isBreadCheeseOrNoy").toString());
		System.out.println("showing types or not " + isSelectCondiments);
		String str = nameOfProducts_forTempValues.get(0)
				.get("Product_selected_size").toString();
		if (str.equalsIgnoreCase("S"))
			str = "Small (Plain)";
		if (str.equalsIgnoreCase("L"))
			str = "Large (Plain)";
		if (str.equalsIgnoreCase("SW"))
			str = "Small With Works";
		if (str.equalsIgnoreCase("LW"))
			str = "Large With Works";

		isSpecialTypeShoworNot = nameOfProducts_forTempValues.get(0)
				.get("isSpecialTypeShow").toString();
		
//		isSpecialTypeShoworNot =pDatabase.getSpecialType(nameOfProducts_forTempValues.get(0).get("Product_Id")
//				.toString());
		
		rlayoutforeditassignname.setVisibility(View.VISIBLE);
		rlayoutforeditspecialrequestnew.setVisibility(View.VISIBLE);
		if (isSelectCondiments) {
			rlayoutforeditbreadcheese.setVisibility(View.GONE);
			rlayoutforeditcondiments.setVisibility(View.GONE);
			if (isSpecialTypeShoworNot.equalsIgnoreCase("0")) {
				rLayoutSpecialRequests.setVisibility(View.GONE);
				rlayoutforeditassignname.setVisibility(View.GONE);
				rlayoutforeditspecialrequestnew.setVisibility(View.GONE);
			}
			// tvSize_ReviewItem.setText(nameOfProducts_forTempValues.get(0).get("Product_selected_size").toString());

//			if (newCondimentsString.length() < 2)
//				tvSize_ReviewItem.setText(str);
			if(newCondimentsString.length()<2){
				if(str.equalsIgnoreCase("D"))
					tvSize_ReviewItem.setText("Dinner");
				else
				 tvSize_ReviewItem.setText(str);
				
			}
			else
				tvSize_ReviewItem
						.setText(str + " (" + newCondimentsString + ")");
			update_check_new = str;
			// tvSize_ReviewItem.setText(str);
			tvSize_ReviewItem.setTextColor(Color.BLACK);

			tvBread_ReviewItem.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_selected_bread").toString()
					+ ", "
					+ nameOfProducts_forTempValues.get(0)
							.get("Product_selected_cheese").toString());
			tvBread_ReviewItem.setTextColor(Color.BLACK);
			try {
				tvCondimentsTotal_ReviewItem.setText(""
						+ new DecimalFormat("0.00").format(Double
								.valueOf(nameOfProducts_forTempValues.get(0)
										.get("Product_condimentsTotalPrice"))
								* Double.parseDouble(quantity)));
			} catch (NumberFormatException exception) {

			}
			tvBread_ReviewItem.setTextColor(Color.BLACK);

			tvAssignName_ReviewItem.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_assign_name").toString());
			tvAssignName_ReviewItem.setTextColor(Color.BLACK);

			tvSpecialRequest_ReviewItem.setText(nameOfProducts_forTempValues
					.get(0).get("Product_special_request").toString());
			tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);

			etQuantity.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_Qnty").toString());
//			etQuantity.requestFocus(etQuantity.getText().length());
			etQuantity.setSelection(etQuantity.getText().length());
			etSandwich_Special.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_assign_name").toString());
			etRequest_Special.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_special_request").toString());

		} else {

			rlayoutforeditbreadcheese.setVisibility(View.VISIBLE);
			rlayoutforeditcondiments.setVisibility(View.VISIBLE);

			// hiding special request
			if (isSpecialTypeShoworNot.equalsIgnoreCase("0")) {
				rLayoutSpecialRequests.setVisibility(View.GONE);
				rlayoutforeditassignname.setVisibility(View.GONE);
				rlayoutforeditspecialrequestnew.setVisibility(View.GONE);
			}

//			if (newCondimentsString.length() < 2)
//				tvSize_ReviewItem.setText(str);
			if(newCondimentsString.length()<2){
				if(str.equalsIgnoreCase("D"))
					tvSize_ReviewItem.setText("Dinner");
				else
				 tvSize_ReviewItem.setText(str);
				
			}
			else
				tvSize_ReviewItem
						.setText(str + " (" + newCondimentsString + ")");
			update_check_new = str;
			// tvSize_ReviewItem.setText(str);
			tvSize_ReviewItem.setTextColor(Color.BLACK);

			tvBread_ReviewItem.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_selected_bread").toString()
					+ ", "
					+ nameOfProducts_forTempValues.get(0)
							.get("Product_selected_cheese").toString());
			tvBread_ReviewItem.setTextColor(Color.BLACK);
			try {
				tvCondimentsTotal_ReviewItem.setText(new DecimalFormat("0.00")
						.format(Double.valueOf(nameOfProducts_forTempValues
								.get(0).get("Product_condimentsTotalPrice"))
								* Double.parseDouble(quantity)));
				tvBread_ReviewItem.setTextColor(Color.BLACK);
			} catch (NumberFormatException exception) {

			}
			tvAssignName_ReviewItem.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_assign_name").toString());
			tvAssignName_ReviewItem.setTextColor(Color.BLACK);

			tvSpecialRequest_ReviewItem.setText(nameOfProducts_forTempValues
					.get(0).get("Product_special_request").toString());
			tvSpecialRequest_ReviewItem.setTextColor(Color.BLACK);

			etQuantity.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_Qnty").toString());
//			etQuantity.requestFocus(etQuantity.length());
			etQuantity.setSelection(etQuantity.getText().length());
			etSandwich_Special.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_assign_name").toString());
			etRequest_Special.setText(nameOfProducts_forTempValues.get(0)
					.get("Product_special_request").toString());

		}

		// //newly added code to edit
		// condiments_msg2 = new String();
		// condimentsTotalPrice=0.0;
		//
		// product_id = nameOfProducts_forTempValues.get(0).get("Product_Id")
		// .toString();
		//
		// ArrayList<HashMap<String, String>> arr1 = pDatabase
		// .getFieldOptionId(product_id, pSize);
		//
		// fieldOptionId = arr1.get(0).get("fieldOptionId").toString();
		// customprice = arr1.get(0).get("customprice").toString();
		//
		// productPrice = Double.parseDouble(arr1.get(0).get(
		// "customprice"));
		//
		// new GetCondimentsAsync().execute();
	}

	public void setSelectSizeCustomData() {

		// TODO Auto-generated method stub
		try {
			condimentsTotalPrice = 0.00;
			lLayout2_Size.removeAllViews();
			addToCart = new AddToCart();
			rlayoutforeditsizeslice.setVisibility(View.GONE);
			pSize = new String();
			product_name = nameOfProducts1.get(globleIndex).get("Product_Name")
					.toString();
			addToCart.setProduct_name(product_name);
			productDescription = nameOfProducts1.get(globleIndex)
					.get("Product_Description").toString();
			addToCart.setProduct_description(productDescription);
			product_id = nameOfProducts1.get(globleIndex).get("Product_Id")
					.toString();
			addToCart.setProduct_id(product_id);
			try {
				productImage = nameOfProducts1.get(globleIndex)
						.get("Product_Image").toString();
				addToCart.setProduct_image(productImage);
				// Bitmap bm = getBitmapFromURL(productImage);
				// ivProductImage.setImageBitmap(bm);
				imageLoader_main.DisplayImage(productImage, ivProductImage);
				// product_price_TXT1_Size.setText("Price: $"+nameOfProducts1.get(arg2).get("Product_Price").toString());
			} catch (Exception e) {
				System.out.println("Error in fetching bitmap============="
						+ e.toString());
			}

			// Getting the list of attributes from database
			ArrayList<HashMap<String, String>> arrPsize = pDatabase
					.getPsizeList(product_id);

			ivProductImage.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					new ImageDownloadAsynch().execute();
				}
			});
			name_TXT_Size.setText(product_name);

			// name_TXT1_Size.setText(productDescription);
			if (productDescription != null || productDescription.length() != 0) {
				if (productDescription.length() <= 57)
					name_TXT1_Size.setText(productDescription);
				else {
					int len = productDescription.length();
					String str = "";
					for (int i = 0; i < 55; i++) {
						str += productDescription.charAt(i);
					}
					name_TXT1_Size.setText(Html.fromHtml(str
							+ "<font color='#CF000F'>....More</font>"));
					name_TXT1_Size.setOnClickListener(new OnClickListener() {

						@Override
						public void onClick(View v) {
							// TODO Auto-generated method stub
							showProductDescription(productDescription);
						}
					});
				}

			} else
				name_TXT_Size.setVisibility(View.GONE);

			String str = nameOfProducts1.get(globleIndex).get("Product_Name")
					.toString();

			String check_str = nameOfProducts_forTempValues.get(0)
					.get("Product_short_name").toString();
			radioGroup = new RadioGroup(AddToCartActivity.this);
			radioGroup.setOrientation(RadioGroup.VERTICAL);
			objProducts = new Products();
			rb = new RadioButton[arrPsize.size()];
			// Adding radio buttons to radio group
			for (int i = 0; i < arrPsize.size(); i++) {
				pSize_radio = arrPsize.get(i).get("pSize").toString();
				customprice = arrPsize.get(i).get("customprice").toString();
				short_name = arrPsize.get(i).get("short_name").toString();
				fieldId = arrPsize.get(i).get("fieldId").toString();
				fieldOptionId = arrPsize.get(i).get("fieldOptionId").toString();

				rb[i] = new RadioButton(AddToCartActivity.this);
				radioGroup.addView(rb[i]);
				// rb[0].setChecked(true);

				if (pSize_radio.equalsIgnoreCase("S"))
					pSize_radio = "Small (Plain)";
				if (pSize_radio.equalsIgnoreCase("L"))
					pSize_radio = "Large (Plain)";
				if (pSize_radio.equalsIgnoreCase("SW"))
					pSize_radio = "Small With Works";
				if (pSize_radio.equalsIgnoreCase("LW"))
					pSize_radio = "Large With Works";

				if (pSize_radio.equalsIgnoreCase("D"))
					rb[i].setText("Dinner" + ": $" + customprice);
				else
					rb[i].setText(pSize_radio + ": $" + customprice);
				rb[i].setTextColor(Color.BLACK);
				rb[i].setTypeface(customFont);
			}
			System.out.println("checked::::" + pSize_radio);

			// newly added code
			if (check_str.equalsIgnoreCase("Small (Plain)")) {

				check_str = "S";
			}
			if (check_str.equalsIgnoreCase("Large (Plain)")) {
				check_str = "L";
			}
			if (check_str.equalsIgnoreCase("Small With Works")) {
				check_str = "SW";
			}
			if (check_str.equalsIgnoreCase("Large With Works")) {
				check_str = "LW";
			}
			if (arrPsize.size() > 1) {
				if (check_str.equalsIgnoreCase("s")) {
					rb[0].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(0).get("pSize").toString();
					short_name = arrPsize.get(0).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("l")) {
					rb[1].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(1).get("pSize").toString();
					short_name = arrPsize.get(1).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("sw")) {
					rb[2].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(2).get("pSize").toString();
					short_name = arrPsize.get(2).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("lw")) {
					if( arrPsize.size()==2){
						rb[1].setChecked(true);
						product_price_TXT1_Size
						.setText("PRICE: $"
								+ new DecimalFormat("0.00").format((Double
										.valueOf(arrPsize.get(0)
												.get("customprice")
												.toString()) + Double
										.valueOf(nameOfProducts_forTempValues
												.get(0)
												.get("Product_condimentsTotalPrice")
												.toString()))
										* Double.parseDouble(quantity)));
				pSize_radio = arrPsize.get(1).get("pSize").toString();
				short_name = arrPsize.get(1).get("short_name").toString();
					}
					else{
					rb[3].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(3).get("pSize").toString();
					short_name = arrPsize.get(3).get("short_name").toString();
					}
				}else if (check_str.equalsIgnoreCase("1/2 Pt")) {
					rb[0].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(0).get("pSize").toString();
					short_name = arrPsize.get(0).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("Pint")) {
					rb[1].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(1).get("pSize").toString();
					short_name = arrPsize.get(1).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("Quart")) {
					rb[2].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(2).get("pSize").toString();
					short_name = arrPsize.get(2).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("1/4 lb")) {
					rb[0].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(0).get("pSize").toString();
					short_name = arrPsize.get(0).get("short_name").toString();
				} else if (check_str.equalsIgnoreCase("1/2 lb")) {
					rb[1].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(1).get("pSize").toString();
					short_name = arrPsize.get(1).get("short_name").toString();
				}else if (check_str.equalsIgnoreCase("1 lb")) {
					rb[2].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(2).get("pSize").toString();
					short_name = arrPsize.get(2).get("short_name").toString();
				}
				else {
					rb[0].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(0).get("pSize").toString();
					short_name = arrPsize.get(0).get("short_name").toString();
				}
			} else {
				if (arrPsize.size() != 0) {
					rb[0].setChecked(true);
					product_price_TXT1_Size
							.setText("PRICE: $"
									+ new DecimalFormat("0.00").format((Double
											.valueOf(arrPsize.get(0)
													.get("customprice")
													.toString()) + Double
											.valueOf(nameOfProducts_forTempValues
													.get(0)
													.get("Product_condimentsTotalPrice")
													.toString()))
											* Double.parseDouble(quantity)));
					pSize_radio = arrPsize.get(0).get("pSize").toString();
					short_name = arrPsize.get(0).get("short_name").toString();
				}
			}
			pSize = pSize_radio;
			if (pSize_radio.equalsIgnoreCase("Small (Plain)")) {

				pSize_radio = pSize;
				pSize = "S";
				short_name = "S";
			}
			if (pSize_radio.equalsIgnoreCase("Large (Plain)")) {
				pSize_radio = pSize;
				pSize = "L";
				short_name = "L";
			}
			if (pSize_radio.equalsIgnoreCase("Small With Works")) {
				pSize_radio = pSize;
				pSize = "SW";
				short_name = "SW";
			}
			if (pSize_radio.equalsIgnoreCase("Large With Works")) {
				pSize_radio = pSize;
				pSize = "LW";
				short_name = "LW";
			}
			// pSize=pSize_radio
			// addToCart.setpSize(pSize);
			addToCart.setpSize(pSize_radio);
			addToCart.setpSize(pSize);
			addToCart.setShort_name(short_name);
			// pSize_radio = "Small";
			// pSize = "S";
			// short_name = "S";
			// product_price_TXT1_Size.setText("Price: $"+new
			// DecimalFormat("0.00").format(Double.valueOf(arrPsize.get(0).get("customprice").toString())+
			// Double.valueOf(nameOfProducts_forTempValues.get(0).get("Product_condimentsTotalPrice").toString())));
			product_price_TXT1_Size.setTypeface(customFontBold);
			radioGroup
					.setOnCheckedChangeListener(new OnCheckedChangeListener() {

						@Override
						public void onCheckedChanged(RadioGroup group,
								int checkedId) {
							// TODO Auto-generated method stub

							int selected = group.getCheckedRadioButtonId();
							System.out
									.println("The value of checked button============"
											+ selected);
							// pSize = rb[0].getText().toString();
							pSize = ((RadioButton) AddToCartActivity.this
									.findViewById(group
											.getCheckedRadioButtonId()))
									.getText().toString();
							// pSize_radio =
							// arrPsize.get(selected).get("pSize")
							// .toString();
							// .toString());
							String replaceDollar = pSize.replace(": $", "@");
							String checkedValueArray[] = replaceDollar
									.split("@");
							System.out.println("selected values::"
									+ checkedValueArray[1]);
							customprice = checkedValueArray[1];
							product_price_TXT1_Size.setText("PRICE: $"
									+ new DecimalFormat("0.00").format(Double
											.valueOf(checkedValueArray[1])
											* Double.parseDouble(quantity)));
							product_price_TXT1_Size.setTypeface(customFontBold);

							pSize = checkedValueArray[0].trim();
							if (pSize.equalsIgnoreCase("Small (Plain)")) {
								pSize_radio = pSize;
								pSize = "S";
								short_name = "S";
							} else if (pSize.equalsIgnoreCase("Large (Plain)")) {
								pSize_radio = pSize;
								pSize = "L";
								short_name = "L";
							} else if (pSize
									.equalsIgnoreCase("Small With Works")) {
								pSize_radio = pSize;
								pSize = "SW";
								short_name = "SW";
							} else if (pSize
									.equalsIgnoreCase("Large With Works")) {
								pSize_radio = pSize;
								pSize = "LW";
								short_name = "LW";
							} else {
								pSize_radio = pSize;
								short_name = pSize;
							}
							addToCart.setpSize(pSize);
							addToCart.setShort_name(short_name);

							System.out
									.println("The value of checked button============"
											+ selected);
						}

					});
			lLayout2_Size.addView(radioGroup);
			// lLayoutHome.setVisibility(View.GONE);
			// lLayoutTitle.setVisibility(View.VISIBLE);
			// rLayoutSize.setVisibility(View.VISIBLE);
			// rLayoutBread.setVisibility(View.VISIBLE);

			ArrayList<HashMap<String, String>> arr1 = pDatabase
					.getFieldOptionId(product_id, pSize);
			if (arr1.size() != 0) {
				fieldOptionId = arr1.get(0).get("fieldOptionId").toString();
				customprice = arr1.get(0).get("customprice").toString();

				productPrice = Double.parseDouble(arr1.get(0)
						.get("customprice"));
			}
			changecheeseprice = 0.0;
			new GetCondimentsAsync1().execute();
		} catch (NumberFormatException exception) {

		}catch (Exception e) {
			// TODO: handle exception
		}

	}

	private void showShareDialog() {
		overridePendingTransition(R.anim.slide_in_up, R.anim.stay);
		final Dialog dialog = new Dialog(AddToCartActivity.this,
				R.style.DialogSlideAnim);
		dialog.setContentView(R.layout.menudialog);
		Button cancelBTN = (Button) dialog.findViewById(R.id.canlceBTN);
		// country.setVisibleItems(3);
		dialog.setCancelable(true);
		dialog.show();
		cancelBTN.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				dialog.dismiss();
			}
		});

	}

	private void initialisation() {
		// TODO Auto-generated method stub
		// Create the adapter that will return a fragment for each of the three
		// primary sections of the app.
		// mSectionsPagerAdapter = new SectionsPagerAdapter(
		// getSupportFragmentManager());

		rlayoutforeditassignname = (RelativeLayout) findViewById(R.id.rlayoutforeditassignname);
		rlayoutforeditspecialrequestnew = (RelativeLayout) findViewById(R.id.rlayoutforeditspecialrequestnew);

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		top_bar = (RelativeLayout) findViewById(R.id.top_bar);
		list_rlyout = (RelativeLayout) findViewById(R.id.list_rlyout);

		// Main layouts to be switched on and off
		rLayoutBread = (RelativeLayout) findViewById(R.id.rLayoutBread);
		rLayoutSize = (RelativeLayout) findViewById(R.id.rLayoutSize);
		lLayoutTitle = (LinearLayout) findViewById(R.id.lLayoutTitle);
		rLayoutCondiments = (RelativeLayout) findViewById(R.id.rLayoutCondiments);
		rLayoutSpecialRequests = (RelativeLayout) findViewById(R.id.rLayoutSpecialRequests);
		rLayoutReviewItem = (RelativeLayout) findViewById(R.id.rLayoutReviewItem);
		// rLayoutShoppingCart = (RelativeLayout)
		// findViewById(R.id.rLayoutShoppingCart);
		rLayoutOrderInfo = (RelativeLayout) findViewById(R.id.rLayoutOrderInfo);
		rLayoutThankYou = (RelativeLayout) findViewById(R.id.rLayoutThankYou);

		// lLayoutTitle assets declaration
		ivProductImage = (ImageView) findViewById(R.id.ivProductImage);
		name_TXT_Size = (TextView) findViewById(R.id.name_TXT_Size);
		name_TXT1_Size = (TextView) findViewById(R.id.name_TXT1_Size);
		product_price_TXT1_Size = (TextView) findViewById(R.id.product_price_TXT1_Size);
		tvOrderTotal_OrderInfo = (TextView) findViewById(R.id.tvOrderTotal_OrderInfo);

		// rLayoutSize...To be visible after listitem clicked
		lLayout2_Size = (LinearLayout) findViewById(R.id.lLayout2_Size);
		tvSize_Size = (TextView) findViewById(R.id.tvSize_Size);
		tvDescription_Size = (TextView) findViewById(R.id.tvDescription_Size);
		radioGroup = (RadioGroup) findViewById(R.id.radioGroup);
		// radioButton1 = (RadioButton) findViewById(R.id.radioButton1);
		// radioButton2 = (RadioButton) findViewById(R.id.radioButton2);
		// radioButton3 = (RadioButton) findViewById(R.id.radioButton3);
		// radioButton4 = (RadioButton) findViewById(R.id.radioButton4);
		btnSelectBread_Size = (Button) findViewById(R.id.btnSelectBread_Size);
		btnBack_Size = (Button) findViewById(R.id.btnBack_Size);
		btnCancel_Size = (Button) findViewById(R.id.btnCancel_Size);

		// rLayoutBread...To be visible after selectbreadsize button is cliked
		tvSize_Bread = (TextView) findViewById(R.id.tvSize_Bread);
		tvBreadType_Bread = (TextView) findViewById(R.id.tvBreadType_Bread);
		tvCheeseType_Bread = (TextView) findViewById(R.id.tvCheeseType_Bread);
		tvDescription_Bread = (TextView) findViewById(R.id.tvDescription_Bread);
		spinnerCheese_Bread = (Spinner) findViewById(R.id.spinnerCheese_Bread);
		spinnerBread_Bread = (Spinner) findViewById(R.id.spinnerBread_Bread);
		btnSelectCondiments_Bread = (Button) findViewById(R.id.btnSelectCondiments_Bread);
		btnBack_Bread = (Button) findViewById(R.id.btnBack_Bread);
		btnCancel_Bread = (Button) findViewById(R.id.btnCancel_Bread);

		// rLayoutCondiments...To be visible after select condiments button is
		// cliked
		lLayout2_Condiments = (LinearLayout) findViewById(R.id.lLayout2_Condiments);
		// checkBox_Condiments = (CheckBox)
		// findViewById(R.id.checkBox_Condiments);
		btnAssignName_Condiments = (Button) findViewById(R.id.btnAssignName_Condiments);
		btnBack_Condiments = (Button) findViewById(R.id.btnBack_Condiments);
		btnCancel_Condiments = (Button) findViewById(R.id.btnCancel_Condiments);

		// rLayoutSpecialRequests...To be visible after review and add to cart
		// button
		// is cliked
		btnReview_SpecialRequests = (Button) findViewById(R.id.btnReview_SpecialRequests);
		btnBack_SpecialRequests = (Button) findViewById(R.id.btnBack_SpecialRequests);
		btnCancel_SpecialRequests = (Button) findViewById(R.id.btnCancel_SpecialRequests);
		etSandwich_Special = (EditText) findViewById(R.id.etSandwich_Special);
		etRequest_Special = (EditText) findViewById(R.id.etRequest_Special);

		// rLayoutReviewItems...To be visible after review and add to cart
		// button is cliked
		btnAddToCart_ReviewItem = (Button) findViewById(R.id.btnAddToCart_ReviewItem);
		btnCancel_ReviewItem = (Button) findViewById(R.id.btnCancel_ReviewItem);
		etQuantity = (EditText) findViewById(R.id.etQuantity);
		tvSize_ReviewItem = (TextView) findViewById(R.id.tvSize_ReviewItem);
		tvBread_ReviewItem = (TextView) findViewById(R.id.tvBread_ReviewItem);
		tvCondimentsTotal_ReviewItem = (TextView) findViewById(R.id.tvCondimentsTotal_ReviewItem);
		tvAssignName_ReviewItem = (TextView) findViewById(R.id.tvAssignName_ReviewItem);
		tvSpecialRequest_ReviewItem = (TextView) findViewById(R.id.tvSpecialRequest_ReviewItem);
		btnEdit1_ReviewItem = (Button) findViewById(R.id.btnEdit1_ReviewItem);
		btnEdit2_ReviewItem = (Button) findViewById(R.id.btnEdit2_ReviewItem);
		btnEdit3_ReviewItem = (Button) findViewById(R.id.btnEdit3_ReviewItem);
		btnEdit4_ReviewItem = (Button) findViewById(R.id.btnEdit4_ReviewItem);
		btnEdit5_ReviewItem = (Button) findViewById(R.id.btnEdit5_ReviewItem);
		// rLayoutShoppingCart...To be visible after add to cart
		// button is cliked
		// lvShoppingCart = (ListView) findViewById(R.id.lvShoppingCart);
		btnCheckout_ShoppingCart = (Button) findViewById(R.id.btnCheckout_ShoppingCart);

		// rLayoutOrderInfor...To be visible after add to cart
		// button is cliked
		btnPlaceOrder_OrderInfo = (Button) findViewById(R.id.btnPlaceOrder_OrderInfo);
		etFirstName_OrderInfo = (EditText) findViewById(R.id.etFirstName_OrderInfo);
		etLastName_OrderInfo = (EditText) findViewById(R.id.etLastName_OrderInfo);
		etEmailId_OrderInfo = (EditText) findViewById(R.id.etEmailId_OrderInfo);
		etPhone_OrderInfo = (EditText) findViewById(R.id.etPhone_OrderInfo);
		etCompany_OrderInfo = (EditText) findViewById(R.id.etCompany_OrderInfo);
		etPickUp_OrderInfo = (EditText) findViewById(R.id.etPickUp_OrderInfo);

		btnPlaceOrder_backbtn = (Button) findViewById(R.id.btnPlaceOrder_backbtn);
		btnOkThankYou = (Button) findViewById(R.id.btnOkThankYou);

		tvOrderTotal_ShoppingCart = (TextView) findViewById(R.id.tvOrderTotal_ShoppingCart);
		tvOrderTotal_ShoppingCartQnty = (TextView) findViewById(R.id.tvOrderTotal_ShoppingCartQnty);
		// mViewPager.setAdapter(mSectionsPagerAdapter);

		name_TXT_Size.setTypeface(customFontBold);
		name_TXT1_Size.setTypeface(customFont);
		product_price_TXT1_Size.setTypeface(customFontBold);
		tvSize_Size.setTypeface(customFont);
		tvDescription_Size.setTypeface(customFont);

		tvSize_Bread.setTypeface(customFont);
		tvBreadType_Bread.setTypeface(customFontBold);
		tvCheeseType_Bread.setTypeface(customFontBold);
		tvDescription_Bread.setTypeface(customFont);

		tvSize_ReviewItem.setTypeface(customFont);
		tvBread_ReviewItem.setTypeface(customFont);
		tvCondimentsTotal_ReviewItem.setTypeface(customFont);
		tvAssignName_ReviewItem.setTypeface(customFont);
		tvSpecialRequest_ReviewItem.setTypeface(customFont);
		etQuantity.setTypeface(customFont);

		etFirstName_OrderInfo.setTypeface(customFont);
		etLastName_OrderInfo.setTypeface(customFont);
		etEmailId_OrderInfo.setTypeface(customFont);
		etPhone_OrderInfo.setTypeface(customFont);
		etCompany_OrderInfo.setTypeface(customFont);
		etPickUp_OrderInfo.setTypeface(customFont);

		tvOrderTotal_ShoppingCart.setTypeface(customFontBold);
		tvOrderTotal_OrderInfo.setTypeface(customFontBold);
		tvOrderTotal_ShoppingCartQnty.setTypeface(customFontBold);

		rlayoutforeditbreadcheese = (RelativeLayout) findViewById(R.id.rlayoutforeditbreadcheese);
		rlayoutforeditcondiments = (RelativeLayout) findViewById(R.id.rlayoutforeditcondiments);

		empty_list = (RelativeLayout) findViewById(R.id.empty_list);
		empty_listview_txt = (TextView) findViewById(R.id.empty_listview_txt);

		postorder_msg = (TextView) findViewById(R.id.postorder_msg);

		rlayoutforeditsizeslice = (RelativeLayout) findViewById(R.id.rlayoutforeditsizeslice);
		btnEditslice_ReviewItem = (Button) findViewById(R.id.btnEdit1_ReviewItemslice);
		tvSize_ReviewItemslice = (TextView) findViewById(R.id.tvSize_ReviewItemslice);

		rLayoutSize_slice = (RelativeLayout) findViewById(R.id.rLayoutSize_slice);
		lLayout2_Size_slice = (LinearLayout) findViewById(R.id.lLayout2_Size_slice);
		btnBack_Size_slice = (Button) findViewById(R.id.btnBack_Size_slice);
		btnSelectBread_Size_slice = (Button) findViewById(R.id.btnSelectBread_Size_slice);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	/**
	 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
	 * one of the sections/tabs/pages.
	 */
	// public class SectionsPagerAdapter extends FragmentPagerAdapter {
	//
	// public SectionsPagerAdapter(FragmentManager fm) {
	// super(fm);
	// }
	// 1)Design home screen and changing tab titles style. 2)showing cart from
	// database and user can custimse that order with design screens
	// @Override
	// public Fragment getItem(int position) {
	// // getItem is called to instantiate the fragment for the given page.
	// // Return a DummySectionFragment (defined as a static inner class
	// // below) with the page number as its lone argument.
	// Fragment fragment = null;
	// // Getting value of category names and query data to set in the list
	//
	// catName = HomePageActivity.arrCatName.get(position);
	//
	// nameOfProduct = pDatabase.getProductList(catName);
	//
	// // Setting data to every page as it changes called only when
	// // pagecategoryName
	// // changes first time
	// fragment = new DummySectionFragment(nameOfProduct);
	// Bundle args = new Bundle();
	// args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, position);
	// fragment.setArguments(args);
	//
	// return fragment;
	// }
	//
	// @Override
	// public int getCount() {
	// // Show 6 total pages.
	// return HomePageActivity.count;
	// }
	//
	// @Override
	// public CharSequence getPageTitle(int position) {
	// Locale l = Locale.getDefault();
	//
	// return HomePageActivity.arrCatName.get(position);
	// }
	// }

	// /**
	// * A dummy fragment representing a section of the app, but that simply
	// * displays dummy text.
	// */
	// @SuppressLint("ValidFragment")
	// public class /* static */DummySectionFragment extends Fragment {
	// /**
	// * The fragment argument representing the section number for this
	// * fragment.
	// */
	// // public ArrayList<HashMap<String, String>> nameOfProducts1 = new
	// // ArrayList<HashMap<String, String>>();
	// public static final String ARG_SECTION_NUMBER = "section_number";
	//
	// @SuppressLint("ValidFragment")
	// public DummySectionFragment(
	// ArrayList<HashMap<String, String>> nameOfProduct) {
	// nameOfProducts1 = nameOfProduct;
	// }
	//
	// @Override
	// public View onCreateView(LayoutInflater inflater, ViewGroup container,
	// Bundle savedInstanceState) {
	// View rootView = inflater.inflate(R.layout.fragment_main_dummy,
	// container, false);
	// TextView dummyTextView = (TextView) rootView
	// .findViewById(R.id.section_label);
	// lvCart = (ListView) rootView.findViewById(R.id.lvProducts);
	// dummyTextView.setText(Integer.toString(getArguments().getInt(
	// ARG_SECTION_NUMBER)));
	// mProduct_list_Adapter = new Product_list_Adapter(getActivity(),
	// nameOfProducts1);
	//
	// lvCart.setAdapter(mProduct_list_Adapter);
	// mProduct_list_Adapter.notifyDataSetChanged();
	//
	// lvCart.setOnItemClickListener(new OnItemClickListener() {
	//
	// @Override
	// public void onItemClick(AdapterView<?> arg0, View arg1,
	// int arg2, long arg3) {
	// // TODO Auto-generated method stub
	//
	// addToCart = new AddToCart();
	// pSize = new String();
	// product_name = nameOfProducts1.get(arg2)
	// .get("Product_Name").toString();
	// addToCart.setProduct_name(product_name);
	// productDescription = nameOfProducts1.get(arg2)
	// .get("Product_Description").toString();
	// addToCart.setProduct_description(productDescription);
	// product_id = nameOfProducts1.get(arg2).get("Product_Id")
	// .toString();
	// addToCart.setProduct_id(product_id);
	// try {
	// productImage = nameOfProducts1.get(arg2)
	// .get("Product_Image").toString();
	// addToCart.setProduct_image(productImage);
	// Bitmap bm = getBitmapFromURL(productImage);
	// ivProductImage.setImageBitmap(bm);
	//
	// } catch (Exception e) {
	// System.out
	// .println("Error in fetching bitmap============="
	// + e.toString());
	// }
	//
	// // Getting the list of attributes from database
	// ArrayList<HashMap<String, String>> arrPsize = pDatabase
	// .getPsizeList(product_id);
	//
	// name_TXT_Size.setText(product_name);
	// name_TXT1_Size.setText(productDescription);
	//
	// String str = nameOfProducts1.get(arg2).get("Product_Name")
	// .toString();
	//
	// radioGroup = new RadioGroup(AddToCartActivity.this);
	// radioGroup.setOrientation(RadioGroup.VERTICAL);
	// objProducts = new Products();
	// rb = new RadioButton[arrPsize.size()];
	// // Adding radio buttons to radio group
	// for (int i = 0; i < arrPsize.size(); i++) {
	// pSize_radio = arrPsize.get(i).get("pSize").toString();
	// customprice = arrPsize.get(i).get("customprice")
	// .toString();
	// short_name = arrPsize.get(i).get("short_name")
	// .toString();
	// fieldId = arrPsize.get(i).get("fieldId").toString();
	// fieldOptionId = arrPsize.get(i).get("fieldOptionId")
	// .toString();
	//
	// rb[i] = new RadioButton(AddToCartActivity.this);
	// radioGroup.addView(rb[i]);
	// if (pSize_radio.equalsIgnoreCase("S"))
	// pSize_radio = "Small";
	// if (pSize_radio.equalsIgnoreCase("L"))
	// pSize_radio = "Large";
	// if (pSize_radio.equalsIgnoreCase("SW"))
	// pSize_radio = "Small With Works";
	// if (pSize_radio.equalsIgnoreCase("LW"))
	// pSize_radio = "Large With Works";
	//
	// rb[i].setText(pSize_radio + " $" + customprice);
	// rb[i].setTextColor(Color.RED);
	// }
	//
	// radioGroup
	// .setOnCheckedChangeListener(new OnCheckedChangeListener() {
	//
	// @Override
	// public void onCheckedChanged(RadioGroup group,
	// int checkedId) {
	// // TODO Auto-generated method stub
	//
	// int selected = group
	// .getCheckedRadioButtonId();
	// System.out
	// .println("The value of checked button============"
	// + selected);
	// pSize = rb[0].getText().toString();
	//
	// // pSize_radio =
	// // arrPsize.get(selected).get("pSize")
	// // .toString();
	// String replaceDollar = pSize.replace("$",
	// "@");
	// String checkedValueArray[] = replaceDollar
	// .split("@");
	// pSize = checkedValueArray[0].trim();
	// if (pSize.equalsIgnoreCase("Small")) {
	// pSize = "S";
	// short_name = "S";
	// }
	// if (pSize.equalsIgnoreCase("Large")) {
	// pSize = "L";
	// short_name = "L";
	// }
	// if (pSize
	// .equalsIgnoreCase("Small With Works")) {
	// pSize = "SW";
	// short_name = "SW";
	// }
	// if (pSize
	// .equalsIgnoreCase("Large With Works")) {
	// pSize = "LW";
	// short_name = "LW";
	// }
	// addToCart.setpSize(pSize);
	// addToCart.setShort_name(short_name);
	// selected = 0;
	//
	// }
	//
	// });
	// lLayout2_Size.addView(radioGroup);
	// lLayoutHome.setVisibility(View.GONE);
	// lLayoutTitle.setVisibility(View.VISIBLE);
	// rLayoutSize.setVisibility(View.VISIBLE);
	// // rLayoutBread.setVisibility(View.VISIBLE);
	// }
	// });
	// return rootView;
	// }
	// }

	// public void setEventListAdapter() {
	// mEvent_list_Adapter = new Event_list_Adapter(HomepageTabActvity.this,
	// nameOfProduct);
	// eventListView.setAdapter(mEvent_list_Adapter);
	// mEvent_list_Adapter.notifyDataSetChanged();
	// }

	public class FetchItemList extends AsyncTask<Void, Void, Void> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			mProgressDialog = new ProgressDialog(AddToCartActivity.this);
			mProgressDialog.setMessage("Loading Data...");
			mProgressDialog.setCancelable(false);
			mProgressDialog.show();
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub
			if (nameOfProducts1.size() != 0) {
				nameOfProducts1.clear();
			}
			// getting the cart items from the server
			nameOfProducts1 = addToCartDatabase.getProductListFromCart();
			

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			mProgressDialog.dismiss();
			if (nameOfProducts1.size() != 0) {
				empty_list.setVisibility(TextView.GONE);
				top_bar.setVisibility(View.VISIBLE);
				list_rlyout.setVisibility(View.VISIBLE);
				addToCartAdapter = new AddToCartAdapter(AddToCartActivity.this,
						nameOfProducts1);
				listviewCart.setAdapter(addToCartAdapter);
				setTotalPrice();
				addToCartAdapter.notifyDataSetChanged();
			} else {
				top_bar.setVisibility(View.GONE);
				list_rlyout.setVisibility(View.GONE);
				empty_list.setVisibility(TextView.VISIBLE);
				empty_listview_txt.setText("Your cart is empty!");
			}
			iscartRefresh =true;
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (mProgressDialog != null) {
			mProgressDialog.dismiss();
			mProgressDialog = null;
		}
	}

	public void setTotalPrice() {
		Double totalPrice = 0.00;
		int totalQnty = 0;
		for (int i = 0; i < nameOfProducts1.size(); i++) {
			totalPrice += (Double.valueOf(nameOfProducts1.get(i)
					.get("Product_productprice").toString()) * Integer
					.valueOf(nameOfProducts1.get(i).get("Product_Qnty")
							.toString()));
			System.out.println("product price :"
					+ nameOfProducts1.get(i).get("Product_Price").toString());
			totalQnty += Integer.valueOf(nameOfProducts1.get(i)
					.get("Product_Qnty").toString());
		}
		// new DecimalFormat("##.##").format(i2)
		tvOrderTotal_ShoppingCart.setText("Estimated order total: $"
				+ new DecimalFormat("0.00").format(totalPrice));
		tvOrderTotal_OrderInfo.setText("Estimated order total: $"
				+ new DecimalFormat("0.00").format(totalPrice));
		tvOrderTotal_ShoppingCartQnty.setText("# of Items: " + totalQnty);
	}

	public static Bitmap getBitmapFromURL(String src) {
		try {
			URL url = new URL(src);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.connect();
			InputStream input = connection.getInputStream();
			Bitmap myBitmap = BitmapFactory.decodeStream(input);
			return myBitmap;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	// public class GetCondimentsAsync extends AsyncTask<Void, Void, Void> {
	//
	// @Override
	// protected void onPreExecute() {
	// // TODO Auto-generated method stub
	// pd = new ProgressDialog(AddToCartActivity.this);
	// pd.setMessage("Loading Data......");
	// pd.setCancelable(false);
	// pd.show();
	// }
	//
	// @Override
	// protected Void doInBackground(Void... params) {
	// // TODO Auto-generated method stub
	// String response = "", cat_id = "", cat_name = "";
	//
	// // String serverURL =
	// //
	// "http://192.168.1.105/baycitiesitaliandeli/server/webservice.php?task=productD&fieldId=1&fieldOptionId=93&productid=117&psize=S&short_name=S&customprice=6.50";
	// String serverURL =
	// "http://dev.bcdeli.com/webservice.php?task=productD&fieldId="
	// + fieldId
	// + "&fieldOptionId="
	// + fieldOptionId
	// + "&productid="
	// + product_id
	// + "&psize="
	// + pSize
	// + "&short_name="
	// + short_name
	// + "&customprice="
	// + customprice;
	// mClient = new WebClient(serverURL);
	// // mClient.AddParam("task", "catlist");
	//
	// response = mClient.getResponse();
	//
	// condimentsArray = new ArrayList<String>();
	// condimentsPriceArray = new ArrayList<String>();
	// cheeseTypeArray = new ArrayList<String>();
	// breadTypeArray = new ArrayList<String>();
	// breadBuilder = new StringBuilder();
	// cheeseBuilder = new StringBuilder();
	//
	// Log.v("Address response :", response);
	// try {
	// JSONArray localJSONArray = new JSONObject(response)
	// .getJSONArray("productdetail");
	// count = localJSONArray.length();
	// for (int i = 0; i < localJSONArray.length(); i++) {
	// JSONObject localJSONObject = (JSONObject) localJSONArray
	// .get(i);
	// {
	// JSONArray localJSONArray1 = localJSONObject
	// .getJSONArray("type");
	// for (int j = 0; j < localJSONArray1.length(); j++) {
	//
	// // CategoryDto categoryDto = new CategoryDto();
	// JSONObject localJSONObject2 = localJSONArray1
	// .getJSONObject(j);
	//
	// if (localJSONObject2.has("type_optionname")) {
	// // categoryDto.tooltip = localJsonObject3
	// // .getString("tooltip");
	// System.out.println("Got the Field Id"
	// + localJSONObject2
	// .getString("type_optionname"));
	// }
	// if (localJSONObject2.has("type_fieldoptionid")) {
	// // categoryDto.tooltip = localJsonObject3
	// // .getString("tooltip");
	// type_fieldoptionid = localJSONObject2
	// .getString("type_fieldoptionid");
	// }
	//
	// {
	// JSONArray localJSONArray2 = localJSONObject2
	// .getJSONArray("Condiments");
	//
	// for (int k = 0; k < localJSONArray2.length(); k++) {
	// JSONObject localJsonObject3 = localJSONArray2
	// .getJSONObject(k);
	// if (localJsonObject3
	// .has("condiments_fieldoptionid")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	//
	// System.out
	// .println("Got the Field Id"
	// + localJsonObject3
	// .getString("condiments_fieldoptionid"));
	// }
	// if (localJsonObject3
	// .has("condiments_fieldoptioniname")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	// if (type_fieldoptionid
	// .equalsIgnoreCase(fieldOptionId)) {
	// condimentsArray
	// .add(localJsonObject3
	// .getString("condiments_fieldoptioniname"));
	// }
	// }
	//
	// if (localJsonObject3.has("condiments_msg1")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	// if (type_fieldoptionid
	// .equalsIgnoreCase(fieldOptionId)) {
	// condiments_msg1 = (localJsonObject3
	// .getString("condiments_msg1"));
	// }
	// }
	//
	// if (localJsonObject3.has("condiments_msg2")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	// if (type_fieldoptionid
	// .equalsIgnoreCase(fieldOptionId)) {
	// condiments_msg2 = (localJsonObject3
	// .getString("condiments_msg2"));
	// }
	// }
	// if (localJsonObject3
	// .has("condiments_price")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	// if (type_fieldoptionid
	// .equalsIgnoreCase(fieldOptionId)) {
	// condimentsPriceArray
	// .add(localJsonObject3
	// .getString("condiments_price"));
	// }
	// }
	// }
	// }
	// {
	// JSONArray localJSONArray3 = localJSONObject2
	// .getJSONArray("Cheese Type");
	// localJSONArray3.length();
	// System.out
	// .println("Length of JSON Array============="
	// + localJSONArray3.length());
	// for (int k = 0; k < localJSONArray3.length(); k++) {
	// JSONObject localJsonObject4 = localJSONArray3
	// .getJSONObject(k);
	// if (localJsonObject4
	// .has("cheesetype_fieldOptionId")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	// localJsonObject4
	// .getString("cheesetype_fieldOptionId");
	// }
	// if (localJsonObject4
	// .has("cheesetype_optionName")) {
	// // categoryDto.tooltip =
	// // localJsonObject3
	// // .getString("tooltip");
	//
	// cheeseTypeArray
	// .add(localJsonObject4
	// .getString(
	// "cheesetype_optionName")
	// .toString());
	// cheeseBuilder
	// .append(localJsonObject4
	// .getString(
	// "cheesetype_optionName")
	// .toString()
	// + ",");
	//
	// }
	// }
	//
	// }
	// } // Bread Type
	// }
	//
	// JSONArray localJSONArray2 = localJSONObject
	// .getJSONArray("Bread Type");
	// for (int j = 0; j < localJSONArray2.length(); j++) {
	//
	// // CategoryDto categoryDto = new CategoryDto();
	// JSONObject localJSONObject2 = localJSONArray2
	// .getJSONObject(j);
	//
	// if (localJSONObject2.has("breadtype_fieldoptionname")) {
	// // categoryDto.tooltip = localJsonObject3
	// // .getString("tooltip");
	//
	// breadTypeArray.add(localJSONObject2
	// .getString("breadtype_fieldoptionname"));
	// breadBuilder.append(localJSONObject2
	// .getString("breadtype_fieldoptionname")
	// + ",");
	// }
	// if (localJSONObject2.has("breadtype_fieldoptionid")) {
	// // categoryDto.tooltip = localJsonObject3
	// // .getString("tooltip");
	// localJSONObject2
	// .getString("breadtype_fieldoptionid");
	// }
	// }
	// }
	//
	// } catch (Exception exception) {
	// System.out
	// .println("Error in parsing from Home page tab =========="
	// + exception.toString());
	// }
	//
	// return null;
	// }
	//
	// @Override
	// protected void onPostExecute(Void result) {
	// // TODO Auto-generated method stub
	// pd.dismiss();
	//
	// mSpinner_Bread_Adapter = new Spinner_Adapter(
	// AddToCartActivity.this, breadTypeArray);
	// spinnerBread_Bread.setAdapter(mSpinner_Bread_Adapter);
	//
	// spinnerBread_Bread
	// .setOnItemSelectedListener(new OnItemSelectedListener() {
	//
	// @Override
	// public void onItemSelected(AdapterView<?> parent,
	// View view, int position, long id) {
	// // TODO Auto-generated method stub
	// breadType = parent.getSelectedItem().toString();
	// }
	//
	// @Override
	// public void onNothingSelected(AdapterView<?> parent) {
	// // TODO Auto-generated method stub
	//
	// }
	// });
	//
	// mSpinner_Cheese_Adapter = new Spinner_Adapter(
	// AddToCartActivity.this, cheeseTypeArray);
	//
	// spinnerCheese_Bread.setAdapter(mSpinner_Cheese_Adapter);
	//
	// spinnerCheese_Bread
	// .setOnItemSelectedListener(new OnItemSelectedListener() {
	//
	// @Override
	// public void onItemSelected(AdapterView<?> parent,
	// View view, int position, long id) {
	// // TODO Auto-generated method stub
	// cheeseType = parent.getSelectedItem().toString();
	// }
	//
	// @Override
	// public void onNothingSelected(AdapterView<?> parent) {
	// // TODO Auto-generated method stub
	//
	// }
	// });
	// // condimentsArray.clear();
	// }
	// }
	public class GetCondimentsAsync extends AsyncTask<Void, Void, Void> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			pd = new ProgressDialog(AddToCartActivity.this);
			pd.setMessage("Loading Data...");
			pd.setCancelable(false);
			pd.show();
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub
			String response = "", cat_id = "", cat_name = "";

			// String serverURL =
			// "http://192.168.1.105/baycitiesitaliandeli/server/webservice.php?task=productD&fieldId="
			String serverURL = "http://dev.bcdeli.com/webservice.php?task=productD&fieldId="
					+ fieldId
					+ "&fieldOptionId="
					+ fieldOptionId
					+ "&productid="
					+ product_id
					+ "&psize="
					+ pSize
					+ "&short_name="
					+ short_name
					+ "&customprice="
					+ customprice;
			serverURL = serverURL.replaceAll(" ", "");
			mClient = new WebClient(serverURL);

			response = mClient.getResponse().replaceAll("`", "");

			condimentsArray.clear();
			condiments_fieldoptionidArray.clear();
			cheeseType_fieldoptionidArray.clear();
			condimentsPriceArray.clear();
			cheeseTypeArray.clear();
			slices_fieldoptionidArray.clear();
			breadTypeArray.clear();
			cheeseTypePriceArray.clear();
			breadTypeArrayID.clear();
			condiments_msg1 = "";
			condiments_msg2 = "";
			// cheeseTypeArray.add("Select Cheese");

			Log.v("Address response :", response);
			try {
				JSONArray localJSONArray = new JSONObject(response)
						.getJSONArray("productdetail");
				count = localJSONArray.length();
				for (int i = 0; i < localJSONArray.length(); i++) {
					JSONObject localJSONObject = (JSONObject) localJSONArray
							.get(i);
					{
						JSONArray localJSONArray1 = localJSONObject
								.getJSONArray("type");
						for (int j = 0; j < localJSONArray1.length(); j++) {

							// CategoryDto categoryDto = new CategoryDto();
							JSONObject localJSONObject2 = localJSONArray1
									.getJSONObject(j);

							if (localJSONObject2.has("type_optionname")) {
								// categoryDto.tooltip = localJsonObject3
								// .getString("tooltip");
							}
							if (localJSONObject2.has("type_fieldoptionid")) {

								type_fieldoptionid = localJSONObject2
										.getString("type_fieldoptionid");
							}

							{
								JSONArray localJSONArray2 = localJSONObject2
										.getJSONArray("Condiments");

								for (int k = 0; k < localJSONArray2.length(); k++) {
									JSONObject localJsonObject3 = localJSONArray2
											.getJSONObject(k);

									IDDTO iddto = new IDDTO();
									// if (localJsonObject3
									// .has("condiments_fieldoptionid")) {
									//
									// }
									if (localJsonObject3
											.has("condiments_fieldoptioniname")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											condimentsArray
													.add(localJsonObject3
															.getString("condiments_fieldoptioniname"));
											iddto.cnmdname = localJsonObject3
													.getString("condiments_fieldoptioniname");
										}
									}

									if (localJsonObject3.has("condiments_msg1")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											// if(condiments_msg1!=null)
											// condiments_msg1="";
											condiments_msg1 = (localJsonObject3
													.getString("condiments_msg1"));
										}
									}

									if (localJsonObject3.has("condiments_msg2")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											// if(condiments_msg2!=null)
											// condiments_msg2="";
											condiments_msg2 = (localJsonObject3
													.getString("condiments_msg2"));
										}
									}
									if (localJsonObject3
											.has("condiments_price")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											condimentsPriceArray
													.add(localJsonObject3
															.getString("condiments_price"));
											iddto.cnmdprice = localJsonObject3
													.getString("condiments_price");
										}
									}

									if (localJsonObject3
											.has("condiments_fieldoptionid")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											iddto.cnmdid = localJsonObject3
													.getString("condiments_fieldoptionid");
											condiments_fieldoptionidArray
													.add(iddto);
										}
									}
								}
							}
							{
								JSONArray localJSONArray3 = localJSONObject2
										.getJSONArray("Cheese Type");
								for (int k = 0; k < localJSONArray3.length(); k++) {
									JSONObject localJsonObject4 = localJSONArray3
											.getJSONObject(k);
									IDDTO localIddto = new IDDTO();
									if (localJsonObject4
											.has("cheesetype_fieldOptionId")) {

										localJsonObject4
												.getString("cheesetype_fieldOptionId");
										localIddto.cnmdid = localJsonObject4
												.getString("cheesetype_fieldOptionId");
									}
									if (localJsonObject4
											.has("cheesetype_optionName")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											cheeseTypeArray
													.add(localJsonObject4
															.getString(
																	"cheesetype_optionName")
															.toString());
											localIddto.cnmdname = localJsonObject4
													.getString(
															"cheesetype_optionName")
													.toString();
										}
									}
									if (localJsonObject4
											.has("cheesetype_price")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											cheeseTypePriceArray
													.add(localJsonObject4
															.getString("cheesetype_price"));
											localIddto.cnmdprice = localJsonObject4
													.getString("cheesetype_price");
											cheeseType_fieldoptionidArray
													.add(localIddto);
										}
									}
								}

							}
						} // Bread Type
					}

					JSONArray localJSONArray2 = localJSONObject
							.getJSONArray("Bread Type");
					for (int j = 0; j < localJSONArray2.length(); j++) {

						// CategoryDto categoryDto = new CategoryDto();
						JSONObject localJSONObject2 = localJSONArray2
								.getJSONObject(j);

						if (localJSONObject2.has("breadtype_fieldoptionname")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");

							breadTypeArray.add(localJSONObject2
									.getString("breadtype_fieldoptionname"));
						}
						if (localJSONObject2.has("breadtype_fieldoptionid")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							localJSONObject2
									.getString("breadtype_fieldoptionid");
							breadTypeArrayID.add(localJSONObject2
									.getString("breadtype_fieldoptionid"));
						}
					}

					// for slices
					JSONArray localJSONArray3 = localJSONObject
							.getJSONArray("Slices");
					for (int j = 0; j < localJSONArray3.length(); j++) {
						IDDTO sliceIddto = new IDDTO();
						// CategoryDto categoryDto = new CategoryDto();
						JSONObject localJSONObject2 = localJSONArray3
								.getJSONObject(j);

						if (localJSONObject2.has("slices_label" + (j + 1))) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							sliceIddto.cnmdname = localJSONObject2
									.getString("slices_label" + (j + 1));

						}
						if (localJSONObject2.has("slices_fieldoptioniid")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							sliceIddto.cnmdid = localJSONObject2
									.getString("slices_fieldoptioniid");
						}
						slices_fieldoptionidArray.add(sliceIddto);
					}
				}

			} catch (Exception exception) {
				System.out
						.println("Error in parsing from Home page tab =========="
								+ customprice_temp_new + exception.toString());
				customprice = customprice_temp_new;
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			pd.dismiss();

			// newly added
			if (breadTypeArray.isEmpty() || cheeseTypeArray.isEmpty()) {
				rLayoutSize.setVisibility(View.GONE);
				if (slices_fieldoptionidArray != null
						&& slices_fieldoptionidArray.size() > 1) {
					lLayout2_Size_slice.removeAllViews();
					rLayoutSize_slice.setVisibility(View.VISIBLE);
					lLayout2_Size_slice.setOrientation(LinearLayout.VERTICAL);
					radioGroup1s = new RadioGroup(AddToCartActivity.this);
					radioGroup1s.setOrientation(RadioGroup.VERTICAL);
					// radioGroup1.setGravity(Gravity.CENTER_HORIZONTAL);
					// radioGroup1.setWeightSum(1);
					rb1s = new RadioButton[slices_fieldoptionidArray.size()];
					for (int i = 0; i < slices_fieldoptionidArray.size(); i++) {

						rb1s[i] = new RadioButton(AddToCartActivity.this);
						radioGroup1s.addView(rb1s[i]);

						rb1s[i].setText(slices_fieldoptionidArray.get(i).cnmdname);
						rb1s[i].setTextColor(Color.BLACK);
						rb1s[i].setTypeface(customFont);
					}
					rb1s[0].setChecked(true);
					newCondimentsString_slice = slices_fieldoptionidArray
							.get(0).cnmdname
							+ "@"
							+ slices_fieldoptionidArray.get(0).cnmdid;
					radioGroup1s
							.setOnCheckedChangeListener(new OnCheckedChangeListener() {

								@Override
								public void onCheckedChanged(RadioGroup group,
										int checkedId) {
									// TODO Auto-generated method stub

									int selected = group
											.getCheckedRadioButtonId();
									System.out
											.println("The value of checked button============"
													+ selected);
									// pSize = rb[0].getText().toString();
									newCondimentsString_slice = ((RadioButton) AddToCartActivity.this
											.findViewById(group
													.getCheckedRadioButtonId()))
											.getText().toString();
									for (int i = 0; i < slices_fieldoptionidArray
											.size(); i++) {
										if (newCondimentsString_slice
												.trim()
												.equalsIgnoreCase(
														slices_fieldoptionidArray
																.get(i).cnmdname
																.trim())) {
											newCondimentsString_slice = newCondimentsString_slice
													+ "@"
													+ slices_fieldoptionidArray
															.get(i).cnmdid;
											break;
										}
									}
									System.out.println("kkkkk"
											+ newCondimentsString);
								}

							});
					lLayout2_Size_slice.addView(radioGroup1s);

				} else
					rLayoutSpecialRequests.setVisibility(View.VISIBLE);
			} else {
				rLayoutSize.setVisibility(View.GONE);
				rLayoutBread.setVisibility(View.VISIBLE);

				mSpinner_Bread_Adapter = new Spinner_Adapter(
						AddToCartActivity.this, breadTypeArray);
				spinnerBread_Bread.setAdapter(mSpinner_Bread_Adapter);
				mSpinner_Bread_Adapter.notifyDataSetChanged();

				spinnerBread_Bread.setSelection(getIndex(spinnerBread_Bread,
						selectedBread));
				BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(System.in));
				spinnerBread_Bread
						.setOnItemSelectedListener(new OnItemSelectedListener() {

							@Override
							public void onItemSelected(AdapterView<?> parent,
									View view, int position, long id) {
								// TODO Auto-generated method stub
								selectedBread = parent.getSelectedItem()
										.toString();
								bread_typeID = breadTypeArrayID.get(position);
								System.out.println("selct by default : "
										+ bread_typeID);
							}

							@Override
							public void onNothingSelected(AdapterView<?> parent) {
								// TODO Auto-generated method stub

							}
						});

				/**shifting no cheese to first position*/
//				if(cheeseTypeArray.size()>3){
//					Collections.swap(cheeseTypeArray, 0, cheeseTypeArray.size()-2);
//					Collections.swap(cheeseTypePriceArray, 0, cheeseTypePriceArray.size()-2);
//					}
				
			    String toMoveUp = "- No Cheese -";
			    try{
			    if(cheeseTypeArray.size()>3){
			    while (cheeseTypeArray.indexOf(toMoveUp) != 0) {
			        int i = cheeseTypeArray.indexOf(toMoveUp);
			        Collections.swap(cheeseTypeArray, i, i - 1);
			        Collections.swap(cheeseTypePriceArray, i, i - 1);
			    }
			    }
			    }catch(Exception exception){
			    	
			    }
				mSpinner_Cheese_Adapter = new Spinner_Adapter(
						AddToCartActivity.this, cheeseTypeArray);

				spinnerCheese_Bread.setAdapter(mSpinner_Cheese_Adapter);

				mSpinner_Cheese_Adapter.notifyDataSetChanged();

				spinnerCheese_Bread.setSelection(getIndex(spinnerCheese_Bread,
						selectedCheese));
				// for selecting cheese spinner
				// spinnerCheese_Bread.setSelection(getIndex(spinnerCheese_Bread,
				// "));

				spinnerCheese_Bread
						.setOnItemSelectedListener(new OnItemSelectedListener() {

							@Override
							public void onItemSelected(AdapterView<?> parent,
									View view, int position, long id) {
								// TODO Auto-generated method stub
								selectedCheese = parent.getSelectedItem()
										.toString();
								tempPrice = Double
										.parseDouble(cheeseTypePriceArray
												.get(position));
								cheese_price_fname = String.valueOf(tempPrice);
								productPrice = productPrice + tempPrice;
								cheese_typeID = cheeseType_fieldoptionidArray
										.get(position).cnmdid;
								System.out
										.println("selct by default cheese_typeID : "
												+ cheese_typeID);
								productPrice = productPrice - changecheeseprice;
								changecheeseprice = tempPrice;
								System.out
										.println("cheese price:::::::::::::::::::::::"
												+ tempPrice);
								product_price_TXT1_Size.setText("PRICE: $"
										+ new DecimalFormat("0.00").format(Double
												.valueOf(productPrice)
												* Double.parseDouble(quantity)));

							}

							@Override
							public void onNothingSelected(AdapterView<?> parent) {
								// TODO Auto-generated method stub

							}
						});
				settingCondinments();
			}
		}
	}

	private int getIndex(Spinner spinner, String myString) {

		int index = 0;

		for (int i = 0; i < spinner.getCount(); i++) {
			if (spinner.getItemAtPosition(i).equals(myString)) {
				index = i;
			}
		}
		return index;
	}

	// for showing condiments total through review button
	public class GetCondimentsAsync1 extends AsyncTask<Void, Void, Void> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			pd = new ProgressDialog(AddToCartActivity.this);
			pd.setMessage("Loading Data...");
			pd.setCancelable(false);
			pd.show();
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub
			String response = "", cat_id = "", cat_name = "";

			// String serverURL =
			// "http://192.168.1.105/baycitiesitaliandeli/server/webservice.php?task=productD&fieldId="
			String serverURL = "http://dev.bcdeli.com/webservice.php?task=productD&fieldId="
					+ fieldId
					+ "&fieldOptionId="
					+ fieldOptionId
					+ "&productid="
					+ product_id
					+ "&psize="
					+ pSize
					+ "&short_name="
					+ short_name
					+ "&customprice="
					+ customprice;
			serverURL = serverURL.replaceAll(" ", "");
			mClient = new WebClient(serverURL);

			// response = mClient.getResponse();
			response = mClient.getResponse().replaceAll("`", "");
			condimentsArray.clear();
			condiments_fieldoptionidArray.clear();
			cheeseType_fieldoptionidArray.clear();
			slices_fieldoptionidArray.clear();
			condimentsPriceArray.clear();
			cheeseTypeArray.clear();
			breadTypeArray.clear();
			cheeseTypePriceArray.clear();
			breadTypeArrayID.clear();
			condiments_msg1 = "";
			condiments_msg2 = "";
			// cheeseTypeArray.add("Select Cheese");

			Log.v("Address response :", response);
			try {
				JSONArray localJSONArray = new JSONObject(response)
						.getJSONArray("productdetail");
				count = localJSONArray.length();
				for (int i = 0; i < localJSONArray.length(); i++) {
					JSONObject localJSONObject = (JSONObject) localJSONArray
							.get(i);
					{
						JSONArray localJSONArray1 = localJSONObject
								.getJSONArray("type");
						for (int j = 0; j < localJSONArray1.length(); j++) {

							// CategoryDto categoryDto = new CategoryDto();
							JSONObject localJSONObject2 = localJSONArray1
									.getJSONObject(j);

							if (localJSONObject2.has("type_optionname")) {
								// categoryDto.tooltip = localJsonObject3
								// .getString("tooltip");
							}
							if (localJSONObject2.has("type_fieldoptionid")) {

								type_fieldoptionid = localJSONObject2
										.getString("type_fieldoptionid");
							}

							{
								JSONArray localJSONArray2 = localJSONObject2
										.getJSONArray("Condiments");

								for (int k = 0; k < localJSONArray2.length(); k++) {
									JSONObject localJsonObject3 = localJSONArray2
											.getJSONObject(k);

									IDDTO iddto = new IDDTO();
									// if (localJsonObject3
									// .has("condiments_fieldoptionid")) {
									//
									// }
									if (localJsonObject3
											.has("condiments_fieldoptioniname")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											condimentsArray
													.add(localJsonObject3
															.getString("condiments_fieldoptioniname"));
											iddto.cnmdname = localJsonObject3
													.getString("condiments_fieldoptioniname");
										}
									}

									if (localJsonObject3.has("condiments_msg1")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											// if(condiments_msg1!=null)
											// condiments_msg1="";
											condiments_msg1 = (localJsonObject3
													.getString("condiments_msg1"));
										}
									}

									if (localJsonObject3.has("condiments_msg2")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											// if(condiments_msg2!=null)
											// condiments_msg2="";
											condiments_msg2 = (localJsonObject3
													.getString("condiments_msg2"));
										}
									}
									if (localJsonObject3
											.has("condiments_price")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											condimentsPriceArray
													.add(localJsonObject3
															.getString("condiments_price"));
											iddto.cnmdprice = localJsonObject3
													.getString("condiments_price");
										}
									}

									if (localJsonObject3
											.has("condiments_fieldoptionid")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											iddto.cnmdid = localJsonObject3
													.getString("condiments_fieldoptionid");
											condiments_fieldoptionidArray
													.add(iddto);
										}
									}
								}
							}
							{
								JSONArray localJSONArray3 = localJSONObject2
										.getJSONArray("Cheese Type");
								for (int k = 0; k < localJSONArray3.length(); k++) {
									JSONObject localJsonObject4 = localJSONArray3
											.getJSONObject(k);
									IDDTO localIddto = new IDDTO();
									if (localJsonObject4
											.has("cheesetype_fieldOptionId")) {

										localJsonObject4
												.getString("cheesetype_fieldOptionId");
										localIddto.cnmdid = localJsonObject4
												.getString("cheesetype_fieldOptionId");
									}
									if (localJsonObject4
											.has("cheesetype_optionName")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											cheeseTypeArray
													.add(localJsonObject4
															.getString(
																	"cheesetype_optionName")
															.toString());
											localIddto.cnmdname = localJsonObject4
													.getString(
															"cheesetype_optionName")
													.toString();
										}
									}
									if (localJsonObject4
											.has("cheesetype_price")) {

										if (type_fieldoptionid
												.equalsIgnoreCase(fieldOptionId)) {
											cheeseTypePriceArray
													.add(localJsonObject4
															.getString("cheesetype_price"));
											localIddto.cnmdprice = localJsonObject4
													.getString("cheesetype_price");
											cheeseType_fieldoptionidArray
													.add(localIddto);
										}
									}
								}

							}
						} // Bread Type
					}

					JSONArray localJSONArray2 = localJSONObject
							.getJSONArray("Bread Type");
					for (int j = 0; j < localJSONArray2.length(); j++) {

						// CategoryDto categoryDto = new CategoryDto();
						JSONObject localJSONObject2 = localJSONArray2
								.getJSONObject(j);

						if (localJSONObject2.has("breadtype_fieldoptionname")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");

							breadTypeArray.add(localJSONObject2
									.getString("breadtype_fieldoptionname"));
						}
						if (localJSONObject2.has("breadtype_fieldoptionid")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							localJSONObject2
									.getString("breadtype_fieldoptionid");
							breadTypeArrayID.add(localJSONObject2
									.getString("breadtype_fieldoptionid"));
						}
					}

					JSONArray localJSONArray3 = localJSONObject
							.getJSONArray("Slices");
					for (int j = 0; j < localJSONArray3.length(); j++) {
						IDDTO sliceIddto = new IDDTO();
						// CategoryDto categoryDto = new CategoryDto();
						JSONObject localJSONObject2 = localJSONArray3
								.getJSONObject(j);

						if (localJSONObject2.has("slices_label" + (j + 1))) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							sliceIddto.cnmdname = localJSONObject2
									.getString("slices_label" + (j + 1));

						}
						if (localJSONObject2.has("slices_fieldoptioniid")) {
							// categoryDto.tooltip = localJsonObject3
							// .getString("tooltip");
							sliceIddto.cnmdid = localJSONObject2
									.getString("slices_fieldoptioniid");
						}
						slices_fieldoptionidArray.add(sliceIddto);
					}
				}

			} catch (Exception exception) {
				System.out
						.println("Error in parsing from Home page tab =========="
								+ exception.toString());
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			pd.dismiss();

			String breadstr = "", cheesestr = "";
			breadstr = nameOfProducts_forTempValues.get(0)
					.get("Product_selected_bread").toString();
			cheesestr = nameOfProducts_forTempValues.get(0)
					.get("Product_selected_cheese").toString();
			selectedBread =breadstr;
			selectedCheese =cheesestr;
			if (slices_fieldoptionidArray != null
					&& slices_fieldoptionidArray.size() > 1) {
				lLayout2_Size_slice.removeAllViews();
				// rLayoutSize_slice.setVisibility(View.VISIBLE);
				lLayout2_Size_slice.setOrientation(LinearLayout.VERTICAL);
				radioGroup1s = new RadioGroup(AddToCartActivity.this);
				radioGroup1s.setOrientation(RadioGroup.VERTICAL);
				// radioGroup1.setGravity(Gravity.CENTER_HORIZONTAL);
				// radioGroup1.setWeightSum(1);
				rb1s = new RadioButton[slices_fieldoptionidArray.size()];
				for (int i = 0; i < slices_fieldoptionidArray.size(); i++) {

					rb1s[i] = new RadioButton(AddToCartActivity.this);
					radioGroup1s.addView(rb1s[i]);

					rb1s[i].setText(slices_fieldoptionidArray.get(i).cnmdname);
					rb1s[i].setTextColor(Color.BLACK);
					rb1s[i].setTypeface(customFont);
				}
				if(selectedSlice.equalsIgnoreCase("Thin")){
				rb1s[0].setChecked(true);
				newCondimentsString_slice = slices_fieldoptionidArray.get(0).cnmdname
						+ "@" + slices_fieldoptionidArray.get(0).cnmdid;
				}
				else{
					rb1s[1].setChecked(true);
					newCondimentsString_slice = slices_fieldoptionidArray.get(1).cnmdname
							+ "@" + slices_fieldoptionidArray.get(1).cnmdid;
				}
//				newCondimentsString_slice = slices_fieldoptionidArray.get(0).cnmdname
//						+ "@" + slices_fieldoptionidArray.get(0).cnmdid;
				radioGroup1s
						.setOnCheckedChangeListener(new OnCheckedChangeListener() {

							@Override
							public void onCheckedChanged(RadioGroup group,
									int checkedId) {
								// TODO Auto-generated method stub

								int selected = group.getCheckedRadioButtonId();
								System.out
										.println("The value of checked button============"
												+ selected);
								// pSize = rb[0].getText().toString();
								newCondimentsString_slice = ((RadioButton) AddToCartActivity.this
										.findViewById(group
												.getCheckedRadioButtonId()))
										.getText().toString();
								for (int i = 0; i < slices_fieldoptionidArray
										.size(); i++) {
									if (newCondimentsString_slice.trim()
											.equalsIgnoreCase(
													slices_fieldoptionidArray
															.get(i).cnmdname
															.trim())) {
										newCondimentsString_slice = newCondimentsString_slice
												+ "@"
												+ slices_fieldoptionidArray
														.get(i).cnmdid;
										break;
									}
								}
								System.out.println("kkkkk"
										+ newCondimentsString);
							}

						});
				lLayout2_Size_slice.addView(radioGroup1s);
				rlayoutforeditsizeslice.setVisibility(View.VISIBLE);
				String[] str = newCondimentsString_slice.split("@");
				tvSize_ReviewItemslice.setText(str[0]);

			} else {
				rlayoutforeditsizeslice.setVisibility(View.GONE);
				mSpinner_Bread_Adapter = new Spinner_Adapter(
						AddToCartActivity.this, breadTypeArray);
				spinnerBread_Bread.setAdapter(mSpinner_Bread_Adapter);
				mSpinner_Bread_Adapter.notifyDataSetChanged();
				// for selecting bread spinner
				spinnerBread_Bread.setSelection(getIndex(spinnerBread_Bread,
						breadstr));

				spinnerBread_Bread
						.setOnItemSelectedListener(new OnItemSelectedListener() {

							@Override
							public void onItemSelected(AdapterView<?> parent,
									View view, int position, long id) {
								// TODO Auto-generated method stub
								selectedBread = parent.getSelectedItem()
										.toString();
								bread_typeID = breadTypeArrayID.get(position);
								System.out.println("checking bread id: "
										+ bread_typeID);
							}

							@Override
							public void onNothingSelected(AdapterView<?> parent) {
								// TODO Auto-generated method stub

							}
						});

				/**shifting no cheese to first position*/
//				if(cheeseTypeArray.size()>3){
//					Collections.swap(cheeseTypeArray, 0, cheeseTypeArray.size()-2);
//					Collections.swap(cheeseTypePriceArray, 0, cheeseTypePriceArray.size()-2);
//					}
				try{
			    String toMoveUp = "- No Cheese -";
				if(cheeseTypeArray.size()>3){
			    while (cheeseTypeArray.indexOf(toMoveUp) != 0) {
			        int i = cheeseTypeArray.indexOf(toMoveUp);
			        Collections.swap(cheeseTypeArray, i, i - 1);
			        Collections.swap(cheeseTypePriceArray, i, i - 1);
			    }
				}
				}catch(Exception exception){}
				mSpinner_Cheese_Adapter = new Spinner_Adapter(
						AddToCartActivity.this, cheeseTypeArray);

				spinnerCheese_Bread.setAdapter(mSpinner_Cheese_Adapter);
				mSpinner_Cheese_Adapter.notifyDataSetChanged();

				// for selecting cheese spinner
				spinnerCheese_Bread.setSelection(getIndex(spinnerCheese_Bread,
						cheesestr));

				spinnerCheese_Bread
						.setOnItemSelectedListener(new OnItemSelectedListener() {

							@Override
							public void onItemSelected(AdapterView<?> parent,
									View view, int position, long id) {
								// TODO Auto-generated method stub
								selectedCheese = parent.getSelectedItem()
										.toString();
								tempPrice = Double
										.parseDouble(cheeseTypePriceArray
												.get(position));
								cheese_typeID = cheeseType_fieldoptionidArray
										.get(position).cnmdid;
								System.out.println("checking cheese id: "
										+ cheese_typeID);
								productPrice = productPrice + tempPrice;
								productPrice = productPrice - changecheeseprice;
								changecheeseprice = tempPrice;
								System.out
										.println("cheese price:::::::::::::::::::::::"
												+ tempPrice);
								product_price_TXT1_Size.setText("PRICE: $"
										+ new DecimalFormat("0.00").format(Double
												.valueOf(productPrice)
												* Double.parseDouble(quantity)));

							}

							@Override
							public void onNothingSelected(AdapterView<?> parent) {
								// TODO Auto-generated method stub

							}
						});
				try {
					productPrice = productPrice
							+ Double.valueOf(cheese_price_fname);
					changecheeseprice = Double.valueOf(cheese_price_fname);
				} catch (Exception exception) {
					System.out.println("" + exception.initCause(null));
				}
				settingCondinments();
			}
		}
	}

	InputFilter assigntxt_Filter = new InputFilter() { 
        boolean canEnterSpace = false;

        public CharSequence filter(CharSequence source, int start, int end,
                Spanned dest, int dstart, int dend) {

            if(etSandwich_Special.getText().toString().equals(""))
            {
                canEnterSpace = false;
            }

            StringBuilder builder = new StringBuilder();

            for (int i = start; i < end; i++) { 
                char currentChar = source.charAt(i);

                if (Character.isLetterOrDigit(currentChar) || currentChar == '_') {
                    builder.append(currentChar);
                    canEnterSpace = true;
                }

                if(Character.isWhitespace(currentChar) && canEnterSpace) {
                    builder.append(currentChar);
                }


            }
            return builder.toString();          
        }

    };

	@SuppressWarnings("deprecation")
	public void showAlertDialog_finish(Context context, String title,
			String message, Boolean status) {
		final AlertDialog alertDialog = new AlertDialog.Builder(context)
				.create();
		// Setting Dialog Title
		alertDialog.setTitle(title);
		// Setting Dialog Message
		alertDialog.setMessage(message);
		// Setting alert dialog icon
		alertDialog.setCancelable(false);
		alertDialog.setIcon(R.drawable.fail);
		// Setting OK Button
		alertDialog.setButton("OK", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {
				alertDialog.dismiss();
			}
		});

		// Showing Alert Message
		alertDialog.show();
	}

	public class AddToCartAdapter extends BaseAdapter {

		private static final String TAG = "Product _List_Adapter";
		private LayoutInflater mInflater;
		public ArrayList<HashMap<String, String>> symbols;
		Context mContext;
		public ImageLoader imageLoader;

		// public HashMap<String, String> hashSymbols = new HashMap<String,
		// String>();

		public AddToCartAdapter(Context paramContext,
				ArrayList<HashMap<String, String>> nameOfProducts1) {
			this.mInflater = LayoutInflater.from(paramContext);
			this.symbols = nameOfProducts1;
			mContext = paramContext;
			imageLoader = new ImageLoader(mContext);
		}

		public View getView(final int paramInt, View paramView,
				ViewGroup paramViewGroup) {

			// ImageLoader imLoader = new ImageLoader(mContext);
			// imLoader.clearCache();
			// imLoader.DisplayImage(url, imageView)
			globleIndex = paramInt;
			View v = null;
			if (paramView == null) {
				v = this.mInflater.inflate(R.layout.cartlistrow, null);
				ViewHolder localViewHolder = new ViewHolder();
				localViewHolder.tvProductName = ((TextView) v
						.findViewById(R.id.tvProductName));
				localViewHolder.tvProductDescription = ((TextView) v
						.findViewById(R.id.tvProductDescrption));
				localViewHolder.tvProductQntycartTXT = ((TextView) v
						.findViewById(R.id.tvProductQntycartTXT));
				localViewHolder.ivProductImage = (ImageView) v
						.findViewById(R.id.ivProductImage);
				localViewHolder.cartEditbtn = ((Button) v
						.findViewById(R.id.cartEdit_BTN));
				localViewHolder.cartRemove_BTN = ((Button) v
						.findViewById(R.id.cartRemove_BTN));
				localViewHolder.tvProductPriceTXT = ((TextView) v
						.findViewById(R.id.tvProductPriceTXT));
				localViewHolder.more_txt = ((TextView) v
						.findViewById(R.id.more_txt));
				
				localViewHolder.assignname_TXT = ((TextView) v
						.findViewById(R.id.assignname_TXT));
				
				v.setTag(localViewHolder);
			} else {
				v = paramView;
			}
			try {
//				final String totalContent="";
				ViewHolder localViewHolder1 = new ViewHolder();
				localViewHolder1 = (ViewHolder) v.getTag();
				
				String str_s = symbols.get(paramInt).get("Product_psize").toString();
				if (str_s.equalsIgnoreCase("S") ||str_s.equalsIgnoreCase("Small"))
					str_s = "Small (Plain)";
				if (str_s.equalsIgnoreCase("L") ||str_s.equalsIgnoreCase("Large"))
					str_s = "Large (Plain)";
				if (str_s.equalsIgnoreCase("SW"))
					str_s = "Small With Works";
				if (str_s.equalsIgnoreCase("LW"))
					str_s = "Large With Works";
				if (str_s.equalsIgnoreCase("D"))
					str_s = "Dinner";
				
				String str_slice = ", "+symbols.get(paramInt).get("slice_name").toString();
				String str_paper = " ("+symbols.get(paramInt).get("paper_name").toString()+")";
				if(str_paper.length() < 6 )
					str_paper="";
				if(str_slice.length() < 4 )
					str_slice="";
				String str_bc=", "+symbols.get(paramInt).get("Product_breadtypes").toString() +", "+symbols.get(paramInt).get("Product_cheesetypes").toString();
				if(str_bc.length()<7 || symbols.get(paramInt).get("Product_breadtypes").toString().equalsIgnoreCase("Null"))
					str_bc="";
				String str_c= ", "+symbols.get(paramInt).get("Product_condiments").toString().replaceAll("\\[", "");
				str_c=str_c.replaceAll("\\]", "");
				if(str_c.length()<7)
					str_c="";
				String str_d=" "+symbols.get(paramInt).get("Product_Description").toString();
				final String totalContent="<b>"+str_s +str_slice +str_paper+str_bc+str_c+"</b>"+str_d;
				
				localViewHolder1.tvProductName.setText(symbols.get(paramInt)
						.get("Product_Qnty").toString()
						+ "X "
						+ symbols.get(paramInt).get("Product_Name").toString());

//				localViewHolder1.tvProductDescription.setText(Html.fromHtml(totalContent));
				
				if(symbols.get(paramInt).get("Product_assign_name").toString() !=null && symbols.get(paramInt).get("Product_assign_name").toString().length()>0){
					localViewHolder1.assignname_TXT.setVisibility(TextView.VISIBLE);
					localViewHolder1.assignname_TXT.setText("Item for: "+symbols.get(paramInt).get("Product_assign_name").toString());
				}else{
					localViewHolder1.assignname_TXT.setVisibility(TextView.GONE);
				}
					
//				 localViewHolder1.tvProductDescription.setOnClickListener(new
//				 OnClickListener() {
//				
//				 @Override
//				 public void onClick(View v) {
//				 // TODO Auto-generated method stub
////				 showProductDescription(symbols.get(paramInt)
////				 .get("Product_Description").toString());
//					 showProductDescription(totalContent);
//				 }
//				 });
//				localViewHolder1.tvProductDescription.setText(symbols
//						.get(paramInt).get("Product_Description").toString());
//				localViewHolder1.tvProductPriceTXT
//						.setText("PRICE: $"
//								+ new DecimalFormat("0.00").format(Double
//										.valueOf(symbols.get(paramInt)
//												.get("Product_productprice")
//												.toString())));
				localViewHolder1.tvProductPriceTXT
				.setText("$"
						+ new DecimalFormat("0.00").format(Double
								.valueOf(symbols.get(paramInt)
										.get("Product_productprice")
										.toString())));
				localViewHolder1.tvProductQntycartTXT.setText(symbols
						.get(paramInt).get("Product_Qnty").toString()
						+ " X ");

				localViewHolder1.tvProductName.setTypeface(customFontBold);
				localViewHolder1.tvProductDescription.setTypeface(customFont);
				localViewHolder1.tvProductPriceTXT.setTypeface(customFontBold);
				localViewHolder1.tvProductQntycartTXT
						.setTypeface(customFontBold);
				// if(!symbols.get(paramInt).get("Product_Description").toString().equalsIgnoreCase("null")
				// ||symbols.get(paramInt)
				// .get("Product_Description").toString().length()!=0)
				// localViewHolder1.tvProductDescription.setVisibility(View.VISIBLE);
				// else
				// localViewHolder1.tvProductDescription.setVisibility(View.GONE);
				imageLoader.DisplayImage(
						symbols.get(paramInt).get("Product_Image").toString(),
						localViewHolder1.ivProductImage);
				localViewHolder1.ivProductImage
						.setOnClickListener(new OnClickListener() {

							@Override
							public void onClick(View v) {
								// TODO Auto-generated method stub
								new ImageDownloadAsynch_Adapater()
										.execute(
												symbols.get(paramInt)
														.get("Product_Image")
														.toString(),
												symbols.get(paramInt)
														.get("Product_Name")
														.toString());
							}
						});

				if (totalContent != null
						||totalContent.length() != 0) {
					localViewHolder1.tvProductDescription
							.setVisibility(View.VISIBLE);
					if (totalContent.length() <= 97) {
						localViewHolder1.tvProductDescription.setVisibility(TextView.VISIBLE);
						localViewHolder1.tvProductDescription.setText(Html.fromHtml(totalContent));
						localViewHolder1.more_txt.setVisibility(TextView.GONE);

					} else {
						int len = symbols.get(paramInt)
								.get("Product_Description").toString().length();
//						String str = "";
//						for (int i = 0; i < 145; i++) {
//							str += totalContent.charAt(i);
//						}
						// localViewHolder1.tvProductDescription.setText(Html.fromHtml(str
						// +"<font color='#CF000F'>....More</font>"));
						localViewHolder1.more_txt
								.setVisibility(TextView.VISIBLE);
						localViewHolder1.tvProductDescription.setText(Html.fromHtml(totalContent));
						localViewHolder1.more_txt
								.setOnClickListener(new OnClickListener() {

									@Override
									public void onClick(View v) {
										// TODO Auto-generated method stub
										showProductDescription(totalContent);
									}
								});
						// localViewHolder1.tvProductDescription.setOnClickListener(new
						// OnClickListener() {
						//
						// @Override
						// public void onClick(View v) {
						// // TODO Auto-generated method stub
						// showProductDescription(symbols.get(paramInt)
						// .get("Product_Description").toString());
						// }
						// });
					}

				} else
					localViewHolder1.tvProductDescription
							.setVisibility(View.GONE);

				localViewHolder1.cartEditbtn
						.setOnClickListener(new OnClickListener() {

							@Override
							public void onClick(View v) {
								// TODO Auto-generated method stub
								if (cd.isConnectingToInternet()) {
									iscartRefresh=false;
									selectedItemIndex = paramInt;
									globleIndex = paramInt;
									top_bar.setVisibility(View.GONE);
									list_rlyout.setVisibility(View.GONE);
									rLayoutReviewItem
											.setVisibility(View.VISIBLE);
									lLayoutTitle.setVisibility(View.VISIBLE);
									rLayoutSize.setVisibility(View.GONE);
									rLayoutCondiments.setVisibility(View.GONE);
									rLayoutSpecialRequests
											.setVisibility(View.GONE);
									rLayoutBread.setVisibility(View.GONE);
									System.out.println("checked...");
									breadType = "";
									cheeseType = "";

									cheese_typeID = "1";
									bread_typeID = "1";
									cheese_price_fname = "0.0";
									if (nameOfProducts_forTempValues.size() != 0)
										nameOfProducts_forTempValues.clear();
									nameOfProducts_forTempValues = addToCartDatabase
											.getSelectedProductListFromCart(nameOfProducts1
													.get(paramInt)
													.get("Product_order_id")
													.toString());
									newCondimentsString = nameOfProducts_forTempValues
											.get(0).get("smallWithWork")
											.toString();
									cheese_price_fname = nameOfProducts_forTempValues
											.get(0).get("cheeseprice")
											.toString();
									selectedSlice="";
									selectedSlice =nameOfProducts_forTempValues
											.get(0).get("slicetype")
											.toString();
									if (condiments_types != null)
										condiments_types.clear();
									String[] temp_arr = new String[] {};
									if (nameOfProducts_forTempValues.get(0)
											.get("Product_condiments_total") != null) {
										String str = nameOfProducts_forTempValues
												.get(0)
												.get("Product_condiments_total")
												.toString()
												.replaceAll("\\[", "");
										str = str.replaceAll("\\]", "");
										System.out.println("str : " + str);
										temp_arr = str.split(",");
										for (int i = 0; i < temp_arr.length; i++) {
											condiments_types.add(temp_arr[i]
													.trim());
										}

									}
									ispriceadded = true;
									setAddtoCartEditValues();
									setSelectSizeCustomData();
									setImgeBitmapImageView();
									productQTY = Integer
											.parseInt(nameOfProducts_forTempValues
													.get(0).get("Product_Qnty")
													.toString());
								} else {
									showAlertDialog_finish(
											AddToCartActivity.this,
											"No Internet Connection",
											"Please check your internet connection",
											false);
								}
								// product_price_TXT1_Size.setText("PRICE: $"+new
								// DecimalFormat("0.00").format(Double.valueOf(productPrice)
								// + Double.valueOf(cheese_price_fname)));
								// str_id="";
								// //newly added code
								// if(!bread_typeID.equalsIgnoreCase("1"))
								// str_id=bread_typeID +"*"+cheese_typeID +"*";
								//
								// for (int k = 0; k < condiments_types.size();
								// k++) {
								//
								// for (int i = 0; i <
								// condiments_fieldoptionidArray.size(); i++) {
								//
								// if(condiments_types.get(k).toString().trim().equalsIgnoreCase(condiments_fieldoptionidArray.get(i).cnmdname.trim())){
								// str_id
								// +=condiments_fieldoptionidArray.get(i).cnmdid
								// +"*";
								// break;
								// }
								// }
								// }
								// System.out.println("total ids :: "+str_id);
							}
						});
				localViewHolder1.cartRemove_BTN
						.setOnClickListener(new OnClickListener() {

							@Override
							public void onClick(View v) {
								// TODO Auto-generated method stub
								showEmailDialog_Forgot(paramInt);
							}
						});
				imageLoader.DisplayImage(
						symbols.get(paramInt).get("Product_Image").toString(),
						localViewHolder1.ivProductImage);
				//
				// String image_url = symbols.get(paramInt).get("Product_Image")
				// .toString();
				//
				// localViewHolder1.ivProductImage.setImageBitmap(bm);
				// String image_url =
				// "http://baycitiesitaliandeli.exceptionaire.co/components/com_shoppingcart/assets/images/productimages/meatball.jpg";
				// // imLoader.DisplayImage(
				// //
				// "http://androidexample.com/media/webservice/LazyListView_images/image10.png",
				// // localViewHolder1.ivProductImage);
				// imLoader.DisplayImage(image_url, R.drawable.icon,
				// localViewHolder1.ivProductImage);

			} catch (Exception localException) {
				Log.e("Product_List_Adapter",
						"getView:" + localException.toString());
			}
			return v;
		}

		@Override
		public boolean equals(Object o) {
			// TODO Auto-generated method stub
			return super.equals(o);
		}

		@Override
		protected void finalize() throws Throwable {
			// TODO Auto-generated method stub
			super.finalize();
		}

		@Override
		public int hashCode() {
			// TODO Auto-generated method stub
			return super.hashCode();
		}

		@Override
		public String toString() {
			// TODO Auto-generated method stub
			return super.toString();
		}

		/* private view holder class */
		public class ViewHolder {
			TextView tvProductName, tvProductQntycartTXT, tvProductDescription,
					tvProductPriceTXT, more_txt ,assignname_TXT;
			ImageView ivProductImage;
			Button cartEditbtn, cartRemove_BTN;
		}

		public int getCount() {
			return this.symbols.size();
		}

		public Object getItem(int paramInt) {
			return this.symbols.get(paramInt);
		}

		public long getItemId(int paramInt) {
			return paramInt;
		}

		private void showEmailDialog_Forgot(final int position) {
			final Dialog AlretDialog = new Dialog(AddToCartActivity.this,
					android.R.style.Theme_Translucent_NoTitleBar);
			AlretDialog.requestWindowFeature(1);
			AlretDialog.setContentView(R.layout.confirm_delete);
			AlretDialog.setCancelable(false);
			Button ok_btnshowdialog = (Button) AlretDialog
					.findViewById(R.id.ok_btn);
			Button cancel_btn = (Button) AlretDialog
					.findViewById(R.id.cancel_btn);
			ok_btnshowdialog.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					AlretDialog.dismiss();
					addToCartDatabase.deleteCartProduct(nameOfProducts1
							.get(position).get("Product_order_id").toString());
					nameOfProducts1.remove(position);

					int cartCount = addToCartDatabase.getTotalCartItem();

					if (cartCount > 0) {
						TextView tempTextView = ((TextView) HomePageActivity.tabHost
								.getTabWidget().getChildTabViewAt(2)
								.findViewById(android.R.id.title));
						tempTextView.setText("CART (" + cartCount + ")");
						tempTextView.setTypeface(customFont);
						tempTextView.setTextColor(Color.WHITE);
					} else {
						TextView tempTextView = ((TextView) HomePageActivity.tabHost
								.getTabWidget().getChildTabViewAt(2)
								.findViewById(android.R.id.title));
						tempTextView.setText("CART");
						tempTextView.setTypeface(customFont);
						tempTextView.setTextColor(Color.WHITE);
					}

					if (nameOfProducts1.size() != 0) {

						empty_list.setVisibility(TextView.GONE);
						top_bar.setVisibility(View.VISIBLE);
						list_rlyout.setVisibility(View.VISIBLE);
						addToCartAdapter.notifyDataSetChanged();
						setTotalPrice();

					} else {
						top_bar.setVisibility(View.GONE);
						list_rlyout.setVisibility(View.GONE);
						empty_list.setVisibility(TextView.VISIBLE);
						empty_listview_txt.setText("Your cart is empty!");
					}
				}
			});
			cancel_btn.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					AlretDialog.dismiss();
				}
			});
			AlretDialog.show();

		}

	}

	public String getFieldOptionbreadIds(String optionCheck) {
		String paratmeters_str = "";
		if (optionCheck.trim().equalsIgnoreCase("Italian Roll"))
			paratmeters_str += "121*";
		if (optionCheck.trim().equalsIgnoreCase("Sliced Wheat"))
			paratmeters_str += "122*";
		if (optionCheck.trim().equalsIgnoreCase("Sliced Rye"))
			paratmeters_str += "124*";
		if (optionCheck.trim().equalsIgnoreCase("Sliced 7 grain"))
			paratmeters_str += "125*";
		if (optionCheck.trim().equalsIgnoreCase("Sliced Italian"))
			paratmeters_str += "159*";
		if (optionCheck.trim().equalsIgnoreCase(
				"Herb Gluten Free $1 Extra (Available only on Large)"))
			paratmeters_str += "166*";

		return paratmeters_str;
	}

	// getting field_option ids
	public String getFieldOptionIds(String str1) {
		String paratmeters_str = "";
		String optionCheck = "";
		if (str1 != null || !str1.equalsIgnoreCase("")) {
			String str_temp = str1.replaceAll("\\[", "");
			str_temp = str_temp.replaceAll("\\]", "");
			String[] str = str_temp.split(",");
			for (int i = 0; i < str.length; i++) {
				optionCheck = str[i];
				if (optionCheck.trim().equalsIgnoreCase("Onions"))
					paratmeters_str += "137*";
				if (optionCheck.trim().equalsIgnoreCase("Pickles"))
					paratmeters_str += "138*";
				if (optionCheck.trim().equalsIgnoreCase("Tomatoes"))
					paratmeters_str += "139*";
				if (optionCheck.trim().equalsIgnoreCase("Lettuce"))
					paratmeters_str += "140*";
				if (optionCheck.trim().equalsIgnoreCase("Italian Dressing"))
					paratmeters_str += "141*";
				if (optionCheck.trim().equalsIgnoreCase("Olive Oil"))
					paratmeters_str += "142*";
				if (optionCheck.trim().equalsIgnoreCase("Balsamic Vinegar"))
					paratmeters_str += "143*";
				if (optionCheck.trim().equalsIgnoreCase("Red Wine Vinegar"))
					paratmeters_str += "144*";
				if (optionCheck.trim().equalsIgnoreCase("Avocado Spread"))
					paratmeters_str += "145*";
				if (optionCheck.trim().equalsIgnoreCase("Olives"))
					paratmeters_str += "146*";
				if (optionCheck.trim().equalsIgnoreCase("Pepperoncini"))
					paratmeters_str += "147*";
				if (optionCheck.trim().equalsIgnoreCase("Basil"))
					paratmeters_str += "148*";
				if (optionCheck.trim().equalsIgnoreCase("Cucumber Slices"))
					paratmeters_str += "149*";
				if (optionCheck.trim().equalsIgnoreCase("Pepper Salad - Hot"))
					paratmeters_str += "150*";
				if (optionCheck.trim().equalsIgnoreCase("Pepper Salad - Mild"))
					paratmeters_str += "151*";
				if (optionCheck.trim().equalsIgnoreCase("Salt"))
					paratmeters_str += "152*";
				if (optionCheck.trim().equalsIgnoreCase("Pepper"))
					paratmeters_str += "153*";
				if (optionCheck.trim().equalsIgnoreCase("Mayo"))
					paratmeters_str += "154*";
				if (optionCheck.trim().equalsIgnoreCase("Mustard"))
					paratmeters_str += "155*";
				if (optionCheck.trim().equalsIgnoreCase("Dijon"))
					paratmeters_str += "156*";
				if (optionCheck.trim().equalsIgnoreCase("Honey Mustard"))
					paratmeters_str += "157*";
			}
			return paratmeters_str;
		} else
			return "";
	}

	// getting field_option ids
	public String getFieldOptionCheeseIds(String optionCheck) {
		String paratmeters_str = "";
		if (optionCheck != null || !optionCheck.equalsIgnoreCase("")) {
			if (optionCheck.trim().equalsIgnoreCase("American White"))
				paratmeters_str += "107";
			if (optionCheck.trim().equalsIgnoreCase("American Yellow"))
				paratmeters_str += "108";
			if (optionCheck.trim().equalsIgnoreCase("Cheddar"))
				paratmeters_str += "109";
			if (optionCheck.trim().equalsIgnoreCase("Gouda Chipotle (premium)"))
				paratmeters_str += "110";
			if (optionCheck.trim().equalsIgnoreCase("Gruyere (premium)"))
				paratmeters_str += "113";
			if (optionCheck.trim().equalsIgnoreCase("Havarti (premium)"))
				paratmeters_str += "116";
			if (optionCheck.trim().equalsIgnoreCase(
					"Horseradish Cheddar (premium)"))
				paratmeters_str += "119";
			if (optionCheck.trim().equalsIgnoreCase("Imported Swiss (premium)"))
				paratmeters_str += "120";
			if (optionCheck.trim().equalsIgnoreCase("Jack"))
				paratmeters_str += "123";
			if (optionCheck.trim().equalsIgnoreCase("Jarlsberg (premium)"))
				paratmeters_str += "124";
			if (optionCheck.trim().equalsIgnoreCase("Mozzarella"))
				paratmeters_str += "127";
			if (optionCheck.trim().equalsIgnoreCase("Muenster"))
				paratmeters_str += "128";
			if (optionCheck.trim().equalsIgnoreCase("Pepper Jack"))
				paratmeters_str += "129";
			if (optionCheck.trim().equalsIgnoreCase("Provolone"))
				paratmeters_str += "130";
			if (optionCheck.trim().equalsIgnoreCase("Smoked Gouda (premium)"))
				paratmeters_str += "131";
			if (optionCheck.trim().equalsIgnoreCase(
					"Smoked Mozzarella (premium)"))
				paratmeters_str += "132";
			if (optionCheck.trim()
					.equalsIgnoreCase("Sharp Provolone (premium)"))
				paratmeters_str += "133";
			if (optionCheck.trim().equalsIgnoreCase("Swiss"))
				paratmeters_str += "134";
			if (optionCheck.trim().equalsIgnoreCase(
					"Water Mozzarella - by weight (premium)"))
				paratmeters_str += "135";
			if (optionCheck.trim().equalsIgnoreCase("3 Pepper Colby (premium)"))
				paratmeters_str += "136";
			if (optionCheck.trim().equalsIgnoreCase("No Cheese"))
				paratmeters_str += "158";

		}
		return paratmeters_str;
	}

	// for updating profile
	public class UpdateProfile extends AsyncTask<Void, Void, Void> {

		String data = "", status_welcomemsg = "0";
		int sizeData = 0;
		String clurl = "c";

		public UpdateProfile(String string) {
			// TODO Auto-generated constructor stub
			clurl = string;
		}

		@Override
		protected void onPreExecute() {

			try {
				// Set Request parameter
				data += "&" + URLEncoder.encode("data", "UTF-8") + "=";
				// + serverText.getText();

			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub
			LocalSettings.Load();
			String serverURL = "";
			if (clurl.equalsIgnoreCase("pc")) {
				serverURL = "http://dev.bcdeli.com/webservice.php?task=update_profile&userid="
						+ LocalSettings.user_id
						+ "&email="
						+ LocalSettings.email_id
						+ "&user_phone="
						+ phone
						+ "&user_company=" + company;
			} else if (clurl.equalsIgnoreCase("pca")) {
				serverURL = "http://dev.bcdeli.com/webservice.php?task=update_profile&userid="
						+ LocalSettings.user_id
						+ "&email="
						+ LocalSettings.email_id

						+ "&user_fname=" + fName + "&user_lname=" + lName

						+ "&user_phone=" + phone + "&user_company=" + company;
			} else {
				serverURL = "http://dev.bcdeli.com/webservice.php?task=update_profile&userid="
						+ LocalSettings.user_id
						+ "&email="
						+ LocalSettings.email_id

						+ "&user_company=" + company;
			}

			web = new WebClient(serverURL);
			serverResponse = web.getResponse();

			return null;
		}

		@SuppressLint("NewApi")
		protected void onPostExecute(Void unused) {
			// NOTE: You can call UI Element here.

		}
	}

	// placing order to server

	public class PlaceOrderToServerSide extends AsyncTask<Void, String, String> {

		String data = "";

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			mProgressDialog_tempplace = new ProgressDialog(
					AddToCartActivity.this);
			mProgressDialog_tempplace.setMessage("Loading Data...");
			mProgressDialog_tempplace.setCancelable(false);
			mProgressDialog_tempplace.show();

		}

		@SuppressWarnings({ "deprecation", "unused" })
		@Override
		protected String doInBackground(Void... params) {
			// TODO Auto-generated method stub
			Double totalPrice = 0.00;
			int totalQnty = 0;
			String user_id_temp = "0", login_status = "0";
			if (LoginTabActivity.issUserLogin) {
				user_id_temp = LocalSettings.user_id;
				login_status = "1";
			}
			String serverURL, temp_URL = "", strBaseURL = "http://dev.bcdeli.com/webservice.php?uid=";
			// for (int i = 0; i < nameOfProducts1.size(); i++) {
			// totalPrice
			// +=Double.valueOf(nameOfProducts1.get(i).get("Product_productprice").toString());
			// totalQnty
			// +=Integer.valueOf(nameOfProducts1.get(i).get("Product_Qnty").toString());
			// }

			for (int i = 0; i < nameOfProducts1.size(); i++) {
				totalPrice += (Double.valueOf(nameOfProducts1.get(i)
						.get("Product_productprice").toString()) * Integer
						.valueOf(nameOfProducts1.get(i).get("Product_Qnty")
								.toString()));
				System.out.println("product price :"
						+ nameOfProducts1.get(i).get("Product_Price")
								.toString());
				totalQnty += Integer.valueOf(nameOfProducts1.get(i)
						.get("Product_Qnty").toString());
			}
			LocalSettings.Load();
			try {
				serverURL = URLEncoder.encode(user_id_temp, "UTF-8")
						+ "&loginstatus="
						+ login_status
						+ "&task=processOrder"
						+ "&order=cost~"
						+ URLEncoder.encode(String.valueOf(new DecimalFormat(
								"0.00").format(totalPrice)), "UTF-8")
						+ ",orderqty~"
						+ URLEncoder.encode(String.valueOf(totalQnty), "UTF-8")
						+ ",c_fname~"
						+ URLEncoder.encode(fName, "UTF-8")
						+ ",c_lname~"
						+ URLEncoder.encode(lName, "UTF-8")
//						+ ",c_email~"
//						+ URLEncoder.encode(email, "UTF-8")
//						+ ",c_phone~"
//						+ URLEncoder.encode(phone, "UTF-8")
						+ ",c_email~"
						+ URLEncoder.encode(phone, "UTF-8")
						+ ",c_phone~"
							+ URLEncoder.encode(email, "UTF-8")
						
						+ ",c_company~"
						+ URLEncoder.encode(company.toString().trim(), "UTF-8")
						+ ",orderpickuptime~"
						+ URLEncoder.encode(pickUpTime, "UTF-8")
						+ "&orderdetail=pid";
				
				// integrating three tables data (bay_order ,bay_order_details
				// and bay_order_attributes) from pastorder into single table to
				// show the past-orders into the list
				// making the changes on procress order functionality .
				// discuss the api changes with team and what type of response
				// we required.
				// made changes on add to cart table and logic while user adding
				// product into cart.
				// webClient_temp = new WebClient_temp(baseUrl);
				for (int i = 0; i < nameOfProducts1.size(); i++) {
					String str = nameOfProducts1.get(i).get("Product_optionid")
							.toString()
							+ "*"
							+ nameOfProducts1.get(i).get("attributes_ids")
									.toString();
					String str_ttt = str.substring(str.length() - 1);
					if (str_ttt.equalsIgnoreCase("*")) {
						str = str.substring(0, str.length() - 1);
					}

					if (i == 0) {
						// String str="";
						// str=getFieldOptionIds(nameOfProducts1.get(i).get("Product_condiments").toString());
						// str+=getFieldOptionbreadIds(nameOfProducts1.get(i).get("Product_breadtypes").toString());
						// str+=getFieldOptionCheeseIds(nameOfProducts1.get(i).get("Product_cheesetypes").toString());
						temp_URL += "~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_Id").toString(),
										"UTF-8")
								+ ",pname~"
								+ URLEncoder
										.encode(nameOfProducts1.get(i)
												.get("Product_Name").toString(),
												"UTF-8")
								+ ",qty~"
								+ URLEncoder
										.encode(nameOfProducts1.get(i)
												.get("Product_Qnty").toString(),
												"UTF-8")
								+ ",orderprice~"
								+ URLEncoder
										.encode(String.valueOf((Double
												.valueOf(nameOfProducts1
														.get(i)
														.get("Product_productprice")
														.toString()) * Integer
												.valueOf(nameOfProducts1.get(i)
														.get("Product_Qnty")
														.toString()))), "UTF-8")
								+ ",splreq~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_special_request")
												.toString(), "UTF-8")
								+ ",assname~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_assign_name")
												.toString(), "UTF-8")
								+ ",size~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_psize")
												.toString(), "UTF-8")
								// +",optionid~"+URLEncoder.encode(nameOfProducts1.get(i).get("Product_optionid").toString(),
								// "UTF-8");
								// +",optionid~"+URLEncoder.encode(str, "UTF-8")

								+ ",optionid~"
								+ URLEncoder.encode(str, "UTF-8")
								+ ",sw_lw_pepper~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("smallWithWork")
												.toString(), "UTF-8");
					} else {
						// String str="";
						// str=getFieldOptionIds(nameOfProducts1.get(i).get("Product_condiments").toString());
						// str+=getFieldOptionbreadIds(nameOfProducts1.get(i).get("Product_breadtypes").toString());
						// str+=getFieldOptionCheeseIds(nameOfProducts1.get(i).get("Product_cheesetypes").toString());

						temp_URL += "~~pid~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_Id").toString(),
										"UTF-8")
								+ ",pname~"
								+ URLEncoder
										.encode(nameOfProducts1.get(i)
												.get("Product_Name").toString(),
												"UTF-8")
								+ ",qty~"
								+ URLEncoder.encode(nameOfProducts1.get(i)
										.get("Product_Qnty").toString())
								+ ",orderprice~"
								+ URLEncoder
										.encode(String.valueOf((Double
												.valueOf(nameOfProducts1
														.get(i)
														.get("Product_productprice")
														.toString()) * Integer
												.valueOf(nameOfProducts1.get(i)
														.get("Product_Qnty")
														.toString()))), "UTF-8")
								+ ",splreq~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_special_request")
												.toString(), "UTF-8")
								+ ",assname~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_assign_name")
												.toString(), "UTF-8")
								+ ",size~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("Product_psize")
												.toString(), "UTF-8")
								// +",optionid~"+URLEncoder.encode(nameOfProducts1.get(i).get("Product_optionid").toString(),
								// "UTF-8");
								// +",optionid~"+URLEncoder.encode(str, "UTF-8")
								+ ",optionid~"
								+ URLEncoder.encode(str, "UTF-8")
								+ ",sw_lw_pepper~"
								+ URLEncoder.encode(
										nameOfProducts1.get(i)
												.get("smallWithWork")
												.toString(), "UTF-8");
					}
				}
				System.out.println("calling url::  " + strBaseURL + serverURL
						+ temp_URL);
				webClient_temp = new WebClient_temp(strBaseURL + serverURL
						+ temp_URL);

			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				System.out.println("unsupported encoding exception: "
						+ e1.getMessage());
			}
			try {
				// implementing order place tab functionality with sending total
				// cart items

				webClient_temp.Execute(0);

				serverResponse = webClient_temp.getResponse();
				System.out.println("response from server:   " + serverResponse);
				Log.v("response :", serverResponse);
				// serverResponse="{\"processOrder\":[{\"Result\":\" Dear Bay Cities Deli Customer! #Online Ordering is Available #8:30am - 4:45pm Only #CLOSED MONDAYS #Please check again soon! #Have a wonderful day! \",\"status\":\"2\"}]}";

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return serverResponse;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			String res = "";
			mProgressDialog_tempplace.dismiss();
			JSONObject jsonObject = null;
			try {
				jsonObject = new JSONObject(result);

				JSONArray jsonArray = jsonObject.optJSONArray("processOrder");
				int length = jsonArray.length();

				for (int i = 0; i < length; i++) {
					JSONObject jsonChildNode = null;

					jsonChildNode = jsonArray.getJSONObject(i);

					if (jsonChildNode.has("Result")) {
						res = jsonChildNode.getString("Result");
						System.out.println("Result ==================="
								+ result);
					}
					if (jsonChildNode.has("status")) {
						rstatus_server = jsonChildNode.getString("status");
						System.out.println("status ==================="
								+ rstatus_server);
					}

				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			rLayoutOrderInfo.setVisibility(View.GONE);
			// postorder_msg.setText(Html.fromHtml("Your order was received and is being processed. A copy of your order was sent to your email address. Thank you and see you soon!"));
			if (rstatus_server.equalsIgnoreCase("2")) {
				String[] parts = res.split("#");
				String disp_str = "";
				disp_str = "<b><font color=\"#CD000F\">" + parts[0]
						+ "</font></b>";
				for (int i = 1; i < parts.length; i++)
					disp_str += "<br />" + parts[i];
				postorder_msg.setText(Html.fromHtml(disp_str));
			} else
				postorder_msg.setText(Html.fromHtml(res));
			postorder_msg.setLineSpacing(1, 1);
			postorder_msg.setGravity(Gravity.CENTER_VERTICAL|Gravity.CENTER_HORIZONTAL);
			postorder_msg.setVerticalScrollBarEnabled(true);
			postorder_msg.setMovementMethod(ScrollingMovementMethod
					.getInstance());
			postorder_msg.setScrollBarStyle(View.SCROLLBARS_INSIDE_INSET);
			postorder_msg.setTypeface(customFont);

			rLayoutThankYou.setVisibility(View.VISIBLE);
		}

	}

	public static double round(double value, int places) {
		
		if (places < 0)
			throw new IllegalArgumentException();

		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}

	private void showProductDescription(String server_MSG) {
		final Dialog AlretDialog = new Dialog(AddToCartActivity.this,
				android.R.style.Theme_Translucent_NoTitleBar);
		AlretDialog.requestWindowFeature(1);
		AlretDialog.setContentView(R.layout.successdialog);
		AlretDialog.setCancelable(true);
		TextView message_TXT = (TextView) AlretDialog
				.findViewById(R.id.message_TXT);
		TextView title_message_TXT = (TextView) AlretDialog
				.findViewById(R.id.password_recovery_Txt_title);
		Button ok_btnshowdialog = (Button) AlretDialog
				.findViewById(R.id.ok_btn);
		message_TXT.setText(Html.fromHtml(server_MSG));
		title_message_TXT.setText("Product Description");
		message_TXT.setTypeface(customFont);
		title_message_TXT.setTypeface(customFont);
		ok_btnshowdialog.setTypeface(customFontBold);
		ok_btnshowdialog.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				AlretDialog.dismiss();
			}
		});
		AlretDialog.show();

	}

	private void showProductImage(Bitmap server_IMG, String str) {
		final Dialog AlretDialog = new Dialog(AddToCartActivity.this,
				android.R.style.Theme_Translucent_NoTitleBar);
		AlretDialog.requestWindowFeature(1);
		
		AlretDialog.setContentView(R.layout.showingfullimage);
		AlretDialog.setCancelable(true);
		Button ok_btnshowdialog = (Button) AlretDialog
				.findViewById(R.id.close_image);

		ImageView imageView = (ImageView) AlretDialog
				.findViewById(R.id.showingfullimage);
		TextView productimage_name = (TextView) AlretDialog
				.findViewById(R.id.productimage_name);
		productimage_name.setText(str);
		imageView.setImageBitmap(server_IMG);
		ok_btnshowdialog.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				AlretDialog.dismiss();
			}
		});
		AlretDialog.show();

	}

	class ImageDownloadAsynch extends AsyncTask<Void, Void, Bitmap> {
		protected void onPreExecute() {

			mProgressDialogImg = new ProgressDialog(AddToCartActivity.this);
			mProgressDialogImg.setMessage("Loading Data...");
			mProgressDialogImg.setCancelable(false);
			mProgressDialogImg.show();

			Log.d("PreExceute", "On pre Exceute......");
		}

		protected Bitmap doInBackground(Void... arg0) {
			Log.d("DoINBackGround", "On doInBackground...");

			Bitmap bitmap = DownloadImage(productImage.replace("mobileimages",
					"productimages"));
			final WeakReference<Bitmap> mBitmapReference = new WeakReference<Bitmap>(
					bitmap);
			if (mBitmapReference.get() != null)
				return bitmap;
			else
				return null;
		}

		protected void onPostExecute(Bitmap result) {
			mProgressDialogImg.dismiss();
			// sho
			showProductImage(result, product_name);
		}
	}

	class ImageDownloadAsynch_Adapater extends
			AsyncTask<String, String, Bitmap> {
		String str1 = "";

		protected void onPreExecute() {

			mProgressDialogImg = new ProgressDialog(AddToCartActivity.this);
			mProgressDialogImg.setMessage("Loading Data...");
			mProgressDialogImg.setCancelable(false);
			mProgressDialogImg.show();
			Log.d("PreExceute", "On pre Exceute......");
		}

		protected Bitmap doInBackground(String... arg0) {
			Log.d("DoINBackGround", "On doInBackground...");
			String str = arg0[0];
			str1 = arg0[1];
			Bitmap bitmap = DownloadImage(str.replace("mobileimages",
					"productimages"));
			final WeakReference<Bitmap> mBitmapReference = new WeakReference<Bitmap>(
					bitmap);
			if (mBitmapReference.get() != null)
				return bitmap;
			else
				return null;
		}

		protected void onPostExecute(Bitmap result) {
			mProgressDialogImg.dismiss();
			// sho
			showProductImage(result, str1);
		}
	}

	private void showProductNotAvailableDialog(String server_MSG) {
		final Dialog AlretDialog = new Dialog(AddToCartActivity.this,
				android.R.style.Theme_Translucent_NoTitleBar);
		AlretDialog.requestWindowFeature(1);
		AlretDialog.setContentView(R.layout.productnot_available_dialog);
		AlretDialog.setCancelable(false);
		TextView message_TXT = (TextView) AlretDialog
				.findViewById(R.id.message_TXT);
		ok_btnshowdialog = (Button) AlretDialog.findViewById(R.id.ok_btn);
		message_TXT.setText(server_MSG);
		message_TXT.setTypeface(customFont);
		ok_btnshowdialog.setTypeface(customFontBold);
		ok_btnshowdialog.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				AlretDialog.dismiss();
			}
		});
		AlretDialog.show();

	}
	
	public Bitmap DownloadImage(String URL) {
		Bitmap bitmap = null;
		InputStream in = null;
		try {
			in = OpenHttpConnection(URL);
			bitmap = BitmapFactory.decodeStream(in);
			if (in != null)
				in.close();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return bitmap;
	}

	private InputStream OpenHttpConnection(String urlString) throws IOException {
		InputStream in = null;
		int response = -1;

		URL url = new URL(urlString);
		URLConnection conn = url.openConnection();

		if (!(conn instanceof HttpURLConnection))
			throw new IOException("Not an HTTP connection");

		try {
			HttpURLConnection httpConn = (HttpURLConnection) conn;
			httpConn.setAllowUserInteraction(false);
			httpConn.setInstanceFollowRedirects(true);
			httpConn.setRequestMethod("GET");
			httpConn.connect();
			response = httpConn.getResponseCode();
			if (response == HttpURLConnection.HTTP_OK) {
				in = httpConn.getInputStream();

			}
		} catch (Exception ex) {
			throw new IOException("Error connecting");
		}
		return in;
	}
	@Override
	public void onBackPressed() {
		etPickUp_OrderInfo.setText("");
	}
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
			etPickUp_OrderInfo.setText("");
			AlertDialog.Builder alert1 = new AlertDialog.Builder(
					AddToCartActivity.this);
			alert1.setMessage("Exit the application?");
			alert1.setPositiveButton("OK",
					new DialogInterface.OnClickListener() {

						public void onClick(DialogInterface dialog, int which) {

							finish();
						}
					});
			alert1.setNegativeButton("Cancel",
					new DialogInterface.OnClickListener() {

						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
						}
					});
			alert1.create().show();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public static String baseUrl = "http://dev.bcdeli.com/webservice.php";

}
